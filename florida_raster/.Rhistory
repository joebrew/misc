names(x)
x <- hh[hh_number,]
names(x) <- c(paste0("HH number: ", x[,1], "|| size:"),
1: 7)
x[,1] <- "Representative: "
row.names(x) <- NULL
line1 <- names(x)
line2 <- x[1,]
line1
line2
nchar(hh_number)
chars <- nchar(hh_number)
rep("|", chars)
paste0(rep("|", chars))
line1 <- paste0("HH number: ",
hh_number,
rep("|", 5-chars))
line1
paste0("HH number: ",
hh_number,
" ",
paste0(rep("|", 5-chars)))
paste0("HH number: ",
hh_number,
" ",
paste0(rep("|", (5-chars))))
line1 <- paste0("HH number: ",
hh_number,
" ")
line1
?paste
paste0(rep("|", (5-chars)), collapse = "")
paste0("HH number: ",
hh_number,
" ",
paste0(rep("|", (5-chars)), collapse = ""))
paste0("HH number: ",
hh_number,
" ",
paste0(rep("|", (5-chars)), collapse = ""),
paste0(1:7, "|", collapse = ""))
paste0("HH number: ",
hh_number,
" ",
paste0(rep("|", (5-chars)), collapse = ""),
" ",
paste0(1:7, "|", collapse = ""))
chars <- nchar(hh_number)
x <- hh[hh_number,]
x
paste0("          ",
"Representative: ",
paste0(x[1,], "|", collapse = ""))
x
x <- x[,-1]
paste0("          ",
"Representative: ",
paste0(x[1,], "|", collapse = ""))
line1 <- paste0("HH number: ",
hh_number,
" ",
paste0(rep("|", (5-chars)), collapse = ""),
" ",
paste0(1:7, "|", collapse = ""),
"\n")
line1
line2
toString(line1)
toString(line2)
line2 <- toString(line2)
line2
line2 <- gsub(" , ", "", line2)
line2
line2 <- gsub(":", ": ", line2)
line2
line2 <- gsub(", ", "|", line2)
line2
line1
line2
line2 <- paste0("  ", line2, collapse = "")
line1
line2
toString(line1, line2)
toString(c(line1, line2))
complete_lines <- paste0(line1, line2, collapse = "")
complete_lines
toString(complete_lines)
TableFun <- function(hh_number, names = TRUE){
# GET DATA AND SPECS
chars <- nchar(hh_number)
x <- hh[hh_number,]
x <- x[,-1]
# LINE 1
line1 <- paste0("HH number: ",
hh_number,
" ",
paste0(rep("|", (5-chars)), collapse = ""),
" ",
paste0(1:7, "|", collapse = ""),
"\n")
# LINE 2
line2 <- paste0("          ",
"Representative: ",
paste0(x[1,], "|", collapse = ""))
line2 <- toString(line2)
line2 <- gsub(" , ", "", line2)
line2 <- gsub(":", ": ", line2)
line2 <- gsub(", ", "|", line2)
line2 <- paste0("  ", line2, collapse = "")
complete_lines <- paste0(line1, line2, collapse = "")
toString(complete_lines)
}
sink(paste0(wd, "/print_labels/output.txt"))
cat(TableFun(1))
cat(TableFun(2))
sink()
#####
# DEFINE FUNCTION FOR CLEANING UP LABEL NAMES
#####
TableFun <- function(hh_number, names = TRUE){
# GET DATA AND SPECS
chars <- nchar(hh_number)
x <- hh[hh_number,]
x <- x[,-1]
# LINE 1
line1 <- paste0("HH number: ",
hh_number,
" ",
paste0(rep("|", (5-chars)), collapse = ""),
" ",
paste0(1:7, "|", collapse = ""),
"\n")
# LINE 2
line2 <- paste0("          ",
"Representative: ",
paste0(x[1,], "|", collapse = ""))
line2 <- toString(line2)
line2 <- gsub(" , ", "", line2)
line2 <- gsub(":", ": ", line2)
line2 <- gsub(", ", "|", line2)
line2 <- paste0("  ", line2, "\n" collapse = "")
complete_lines <- paste0(line1, line2, collapse = "")
toString(complete_lines)
}
#####
TableFun <- function(hh_number, names = TRUE){
# GET DATA AND SPECS
chars <- nchar(hh_number)
x <- hh[hh_number,]
x <- x[,-1]
# LINE 1
line1 <- paste0("HH number: ",
hh_number,
" ",
paste0(rep("|", (5-chars)), collapse = ""),
" ",
paste0(1:7, "|", collapse = ""),
"\n")
# LINE 2
line2 <- paste0("          ",
"Representative: ",
paste0(x[1,], "|", collapse = ""))
line2 <- toString(line2)
line2 <- gsub(" , ", "", line2)
line2 <- gsub(":", ": ", line2)
line2 <- gsub(", ", "|", line2)
line2 <- paste0("  ", line2, "\n", collapse = "")
complete_lines <- paste0(line1, line2, collapse = "")
toString(complete_lines)
}
sink(paste0(wd, "/print_labels/output.txt"))
cat(TableFun(1))
cat(TableFun(2))
sink()
TableFun <- function(hh_number, names = TRUE){
# GET DATA AND SPECS
chars <- nchar(hh_number)
x <- hh[hh_number,]
x <- x[,-1]
# LINE 1
line1 <- paste0("HH number: ",
hh_number,
" ",
paste0(rep("|", (5-chars)), collapse = ""),
" ",
paste0(1:7, "|", collapse = ""),
"\n")
# LINE 2
line2 <- paste0("Representative: ",
paste0(x[1,], "|", collapse = ""))
line2 <- toString(line2)
line2 <- gsub(" , ", "", line2)
line2 <- gsub(":", ": ", line2)
line2 <- gsub(", ", "|", line2)
line2 <- paste0("  ", line2, "\n", collapse = "")
complete_lines <- paste0(line1, line2, collapse = "")
toString(complete_lines)
}
sink(paste0(wd, "/print_labels/output.txt"))
cat(TableFun(1))
cat(TableFun(2))
sink()
TableFun <- function(hh_number, names = TRUE){
# GET DATA AND SPECS
chars <- nchar(hh_number)
x <- hh[hh_number,]
x <- x[,-1]
# LINE 1
line1 <- paste0("HH number: ",
hh_number,
" ",
paste0(rep("|", (5-chars)), collapse = ""),
" ",
paste0(1:7, "|", collapse = ""),
"\n")
# LINE 2
line2 <- paste0("Representative: ",
paste0(x[1,], "|", collapse = ""))
line2 <- toString(line2)
line2 <- gsub(" , ", "", line2)
line2 <- gsub(":", ": ", line2)
line2 <- gsub(", ", "|", line2)
line2 <- paste0(" ", line2, "\n", collapse = "")
complete_lines <- paste0(line1, line2, collapse = "")
toString(complete_lines)
}
sink(paste0(wd, "/print_labels/output.txt"))
cat(TableFun(1))
cat(TableFun(2))
sink()
# DEFINE FUNCTION FOR CLEANING UP LABEL NAMES
#####
TableFun <- function(hh_number, names = TRUE){
# GET DATA AND SPECS
chars <- nchar(hh_number)
x <- hh[hh_number,]
x <- x[,-1]
# LINE 1
line1 <- paste0("HH number: ",
hh_number,
" ",
paste0(rep("|", (5-chars)), collapse = ""),
" ",
"HH size: ",
paste0(1:7, "|", collapse = ""),
"\n")
# LINE 2
line2 <- paste0("Representative: ",
paste0(x[1,], "|", collapse = ""))
line2 <- toString(line2)
line2 <- gsub(" , ", "", line2)
line2 <- gsub(":", ": ", line2)
line2 <- gsub(", ", "|", line2)
line2 <- paste0("          ", line2, "\n", collapse = "")
complete_lines <- paste0(line1, line2, collapse = "")
toString(complete_lines)
}
sink(paste0(wd, "/print_labels/output.txt"))
cat(TableFun(1))
cat(TableFun(2))
sink()
sink(paste0(wd, "/print_labels/output.txt"))
for (i in 1:3000){ cat(TableFun(i),"\n")}
sink()
#####
# DEFINE FUNCTION FOR CLEANING UP LABEL NAMES
#####
TableFun <- function(hh_number, names = TRUE){
# GET DATA AND SPECS
chars <- nchar(hh_number)
x <- hh[hh_number,]
x <- x[,-1]
# LINE 1
line1 <- paste0("HH number: ",
hh_number,
" ",
paste0(rep(" ", (5-chars)), collapse = ""),
" ",
"HH size: ",
paste0(1:7, "|", collapse = ""),
"\n")
# LINE 2
line2 <- paste0("Representative: ",
paste0(x[1,], "|", collapse = ""))
line2 <- toString(line2)
line2 <- gsub(" , ", "", line2)
line2 <- gsub(":", ": ", line2)
line2 <- gsub(", ", "|", line2)
line2 <- paste0("          ", line2, "\n", collapse = "")
complete_lines <- paste0(line1, line2, collapse = "")
toString(complete_lines)
}
#####
# WRITE TEXT FILE FOR USE AT fileformat.info
#####
# Instructions: http://www.fileformat.info/tool/label/mergeformat.htm
sink(paste0(wd, "/print_labels/output.txt"))
for (i in 1:3000){ cat(TableFun(i),"\n")}
sink()
?polygon
polygon(x = c(1:10, 10:1),
y = rep(1, 10), rep(2, 20))
polygon(x = c(1:10, 10:1),
y = rep(1, 10), rep(2, 10))
x = c(1:10, 10:1)
x = c(1:10, 10:1)
y = rep(1, 10), rep(2, 10)
polygon(x = x,
y = y)
x = c(1:10, 10:1)
y = rep(1, 10), rep(2, 10)
y = c(rep(1, 10), rep(2, 10))
polygon(x = x,
y = y)
plot(1:10, type = "n")
polygon(x = x,
y = y)
polygon(x = x,
y = y,
fill = "blue")
polygon(x = x,
y = y,
col = "blue")
months
months(1:12)
?months
months(as.Date(paste0("2015-", 1:12, "-01"), format = "%Y-%m-%d"))
ts <- (month = months(as.Date(paste0("2015-", c(12, 1:12), "-01"), format = "%Y-%m-%d")))
ts
#####
# SET WORKING DIRECTORY CONDITIONAL TO SYSTEM
#####
if ( Sys.info()["sysname"] == "Linux" ){
private <- "/media/joebrew/JB/fdoh/private/ab_chd_private"
public <- "/home/joebrew/Documents/fdoh/public/ab_chd_private"
} else {
private <- "E:/fdoh/private/ab_chd_private"
public <- "C:/Users/BrewJR/Documents/fdoh/public/ab_chd_private"
}
setwd(private)
#####
# READ IN THE DATA
#####
load(paste0(private, "/data/images/01_read_and_clean.RData"))
#####
# REESTABLISH WORKING DIRECTORY CONDITIONAL TO SYSTEM
#####
if ( Sys.info()["sysname"] == "Linux" ){
private <- "/media/joebrew/JB/fdoh/private/ab_chd_private"
public <- "/home/joebrew/Documents/fdoh/public/ab_chd_private"
} else {
private <- "E:/fdoh/private/ab_chd_private"
public <- "C:/Users/BrewJR/Documents/fdoh/public/ab_chd_private"
}
setwd(private)
#####
# LOAD PACKAGES
#####
library(xtable)
library(Hmisc)
library(gvlma)
library(car)
library(ResourceSelection)
library(Hmisc)
library(dplyr)
library(RCurl)
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
#####
# SET SEED
#####
set.seed(1)
# #####
# # READ IN BUCHHOLZ DATA (to respond to Parker's late november 2014 query)
# #####
load("/media/joebrew/JB/fdoh/private/buchholz_experiment/data/all_schools_cleaned.RData")
source('~/.active-rstudio-document', echo=TRUE)
unique(sort(bu$school))
bu <-bu[which(bu$school != "Santa Fe"),]
yesyes <- nrow(bu[which(bu$pre_int_bi == "yes" &
bu$post_int_bi == "yes"),])
yesno <- nrow(bu[which(bu$pre_int_bi == "yes" &
bu$post_int_bi == "no"),])
noyes <- nrow(bu[which(bu$pre_int_bi == "no" &
bu$post_int_bi == "yes"),])
nono <- nrow(bu[which(bu$pre_int_bi == "no" &
bu$post_int_bi == "no"),])
library(xtable)
temp <- table(ifelse(bu$pre_int_bi == "yes", "prior intent", "no prior intent"))
temp
noyes / (nono+noyes)
yesyes / (yesno + yesyes)
yesno / (yesno + yesyes)
source('~/.active-rstudio-document', echo=TRUE)
bu <- bu[which(bu$school == "Santa Fe"),]
yesyes <- nrow(bu[which(bu$pre_int_bi == "yes" &
bu$post_int_bi == "yes"),])
yesno <- nrow(bu[which(bu$pre_int_bi == "yes" &
bu$post_int_bi == "no"),])
noyes <- nrow(bu[which(bu$pre_int_bi == "no" &
bu$post_int_bi == "yes"),])
nono <- nrow(bu[which(bu$pre_int_bi == "no" &
bu$post_int_bi == "no"),])
yesno / (nono + yesno)
nono
noyes
yesyes
yesno
shiny::runApp('ShinyApps/controlfluteams')
install.packages("RCurl")
library(RCurl)
my_link <- "https://docs.google.com/spreadsheets/d/1icEDpqkJVNuvGLV6GcULuvfVK0healPyPep3enHkceE/export?gid=0&format=csv"
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
my_csv <- getURL(my_link)
dat <- read.csv(textConnection(my_csv))
getwd()
setwd("/home/joebrew/Documents/misc/florida_raster")
library(rgdal)
fl <- readOGR("florida_counties", "counties")
plot(fl)
library(raster)
bbox(fl)
unlist(bbox(fl))
bbox(fl)[,1]
c(bbox(fl)[1,], bbox(fl[2,]))
c(bbox(fl)[1,], bbox(fl)[2,])
as.numeric(c(bbox(fl)[1,], bbox(fl)[2,]))
ext <-  extent(as.numeric(c(bbox(fl)[1,], bbox(fl)[2,])))
xy <- abs(apply(as.matrix(bbox(ext)), 1, diff))
n <- 5
r <- raster(ext, ncol=xy[1]*5, nrow=xy[2]*5)
## Rasterize the shapefile
rr <-rasterize(teow, r)
rr <-rasterize(fl, r)
plot(rr)
ext <-  extent(as.numeric(c(bbox(fl)[1,], bbox(fl)[2,])))
xy <- abs(apply(as.matrix(bbox(ext)), 1, diff))
n <- 100
r <- raster(ext, ncol=xy[1]*5, nrow=xy[2]*5)
## Rasterize the shapefile
rr <-rasterize(fl, r)
## A couple of outputs
plot(rr)
ext <-  extent(as.numeric(c(bbox(fl)[1,], bbox(fl)[2,])))
xy <- abs(apply(as.matrix(bbox(ext)), 1, diff))
n <- 100
r <- raster(ext, ncol=xy[1]*100, nrow=xy[2]*100)
rr <-rasterize(fl, r)
plot(rr)
shp2raster <- function(shp, mask.raster, label, value, transform = FALSE, proj.from = NA,
proj.to = NA, map = TRUE) {
require(raster, rgdal)
# use transform==TRUE if the polygon is not in the same coordinate system as
# the output raster, setting proj.from & proj.to to the appropriate
# projections
if (transform == TRUE) {
proj4string(shp) <- proj.from
shp <- spTransform(shp, proj.to)
}
# convert the shapefile to a raster based on a standardised background
# raster
r <- rasterize(shp, mask.raster)
# set the cells associated with the shapfile to the specified value
r[!is.na(r)] <- value
# merge the new raster with the mask raster and export to the working
# directory as a tif file
r <- mask(merge(r, mask.raster), mask.raster, filename = label, format = "GTiff",
overwrite = T)
# plot map of new raster
if (map == TRUE) {
plot(r, main = label, axes = F, box = F)
}
names(r) <- label
return(r)
}
x <- shp2raster(fl)
x <- shp2raster(fl, mask.raster = NA)
x <- shp2raster(fl, mask.raster = FALSE)
r <- raster(ncol=180, nrow=180)
extent(r) <- extent(fl)
rp <- rasterize(fl, r, 'AREA')
summary(fl)
rp <- rasterize(fl, r, 'Shape_Area')
plot(rp)
library(devtools)
source_url("https://raw.githubusercontent.com/joebrew/misc/master/functions/functions.R")
fl_collapsed <- collapse_map(fl)
plot(fl_collapsed)
r <- raster(ncol=180, nrow=180)
extent(r) <- extent(fl_collapsed)
rc <- rasterize(fl_collapsed, r, 'Shape_Area')
?rasterize
names(fl_collapsed@data)
summary(fl_colapsed)
summary(fl_collapsed)
proj4string(fl_collapsed) <- proj4string(fl)
summary(fl_collapsed)
is.projected
is.projected(fl_collapsed)
is.projected(fl_collapsed) <- TRUE
extent(fl_collapsed)
fl_collapsed$dummy <- NA
x <- SpatialPolygonsDataFrame(fl_collapsed)
?SpatialPolygonsDataFrame
x <- SpatialPolygonsDataFrame(fl_collapsed, data = "dummy" = 1)
x <- SpatialPolygonsDataFrame(fl_collapsed, data = data.frame("dummy" = 1))
fl_collapsed <- SpatialPolygonsDataFrame(fl_collapsed, data = data.frame("dummy" = 1))
proj4string(fl_collapsed) <- proj4string(fl)
r <- raster(ncol=180, nrow=180)
extent(r) <- extent(fl_collapsed)
rc <- rasterize(fl_collapsed, r, 'dummy')
plot(rc)
summary(rc)

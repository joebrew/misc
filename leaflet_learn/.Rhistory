ts[which(ts$type == "elem"),]$ir
barplot(ts[which(ts$type == "elem"),]$ir)
head(ts)
t(ts)
View(t(ts))
head(ts)
barplot(ts$ir)
dat$id[which(grepl("Queen", dat$school))]
dat$paul_type <- dat$type
dat$id[which(grepl("Jord", dat$school))]
#####
dat$paul_type <- dat$type
dat$paul_type[which(dat$id == -13)] <- "elem" # Queen of peace
dat$paul_type[which(dat$id == -9)] <- "elem" # Jordan Glenn
#####
# CALCULATE IR BY TYPE BY YEAR
#####
library(dplyr)
ts <- dat %>%
group_by(year, paul_type) %>%
summarise(ir = weighted.mean(x = immRate, w = totMem))
ts[which(ts$paul_type == "elem"),]
fl <- read.csv("/media/joebrew/JB/fdoh/private/flShots/flShotsAllYearsAlachua.csv")
#########################
# MAKE AN ESTIMATED GRADE COLUMN IN FLSHOTS
#########################
fl$grade <- factor(ifelse(fl$Age <= 4,
"Pre-K",
ifelse(fl$Age >= 5 &
fl$Age <= 10,
"Elementary",
ifelse(fl$Age >= 11 &
fl$Age <= 13,
"Middle",
ifelse(fl$Age >= 14 &
fl$Age <= 17,
"High",
NA)))),
levels=c("Pre-K", "Elementary", "Middle", "High"))
#########################
# READ IN TOTAL SCHOOL MEMBERSHIP DATA FOR 2013-14
# (from: http://www.fldoe.org/eias/eiaspubs/archives.asp)
#########################
totMem13 <- read.csv("/media/joebrew/JB/fdoh/private/flShots/totMem1314.csv", as.is=TRUE)
totMem12 <- read.csv("/media/joebrew/JB/fdoh/private/flShots/totMem1213.csv", skip=6, as.is=TRUE)
totMem11 <- read.csv("/media/joebrew/JB/fdoh/private/flShots/totMem1112.csv", skip=4, as.is=TRUE)
totMem10 <- read.csv("/media/joebrew/JB/fdoh/private/flShots/totMem1011.csv", skip=4, as.is=TRUE)
totMem09 <- read.csv("/media/joebrew/JB/fdoh/private/flShots/totMem0910.csv", skip=2, as.is=TRUE)
totMem13 <- totMem13[which(totMem13$DISTRICT.NAME == "ALACHUA" &
totMem13$SCHOOL.NAME != "DISTRICT TOTAL"),]
totMem12 <- totMem12[which(totMem12$DISTRICT == "ALACHUA" &
totMem12$SCHOOL != "DISTRICT TOTAL"),]
totMem11 <- totMem11 <- totMem11[which(totMem11$DISTRICT == "ALACHUA" &
totMem11$SCHOOL != "DISTRICT TOTAL"),]
totMem10 <- totMem10 <- totMem10[which(totMem10$District.Name == "ALACHUA" &
totMem10$School.Name != "DISTRICT TOTAL"),]
totMem09 <- totMem09[which(totMem09$DISTRICT.NAME == "ALACHUA" &
totMem09$SCHOOL.NAME != "DISTRICT TOTAL"),]
#add year columns
totMem13$Year <- 2013
totMem12$Year <- 2012
totMem11$Year <- 2011
totMem10$Year <- 2010
totMem09$Year <- 2009
colnames(totMem13) <- toupper(gsub("[.]", "", colnames(totMem13)))
colnames(totMem12) <- toupper(gsub("[.]", "", colnames(totMem12)))
colnames(totMem11) <- toupper(gsub("[.]", "", colnames(totMem11)))
colnames(totMem10) <- toupper(gsub("[.]", "", colnames(totMem10)))
colnames(totMem09) <- toupper(gsub("[.]", "", colnames(totMem09)))
colnames(totMem13)[4] <- "School"
colnames(totMem12)[4] <- "School"
colnames(totMem11)[4] <- "School"
colnames(totMem10)[4] <- "School"
colnames(totMem09)[4] <- "School"
totMem13 <- totMem13[colnames(totMem13)[c(4:18, 20)]]
totMem12 <- totMem12[colnames(totMem12)[c(4:18, 20)]]
totMem11 <- totMem11[colnames(totMem11)[c(4:18, 20)]]
totMem10 <- totMem10[colnames(totMem10)[c(4:18, 20)]]
totMem09 <- totMem09[colnames(totMem09)[c(4:18, 20)]]
totMem <- as.data.frame(rbind(totMem13,
totMem12,
totMem11,
totMem10,
totMem09))
#########################
# CLEAN UP, REMOVE HASHTAGS AND COMMAS, MAKE NUMERIC
#########################
for (i in colnames(totMem)[-1]){
totMem[,i] <- as.numeric(as.character(gsub(",", "",totMem[,i])))
}
#produces warnings.  NAs.  OK.
#########################
# WRITE TOTMEM INTO A CLEANED CSV
head(fl)
ts[which(ts$paul_type == "elem"),]
ts[which(ts$paul_type == "mid"),]
ts[which(ts$paul_type == "high"),]
nrow(dat[which(dat$type == "high" & dat$year == 2009),])
# Manually write in data from http://nyti.ms/WYwNaX
condom <- c(2, 4, 6, 8, 10, 11, 13, 15, 17, 18) / 100 # (assuming perfect use)
pill <- c(1, 1, 1, 1, 2, 2, 2, 2, 3, 3) / 100 # (assuming perfect use)
year <- 1:10
df <- data.frame(year, pill, condom)
df$both <- df$pill * df$condom
# Plot it
my_col <- c("blue", "red", "darkgreen")
my_lty <- 3:1
my_pch <- 15:17
my_vars <- c("condom", "pill", "both")
plot(x = df$year,
y = df$condom,
type = "n",
xlab = "Year",
ylab = "Probability of failure",
ylim = c(0, max(df$condom)))
for (i in 1:3){
lines(df$year, df[,my_vars[i]],
col = my_col[i],
lty = my_lty[i])
points(df$year, df[,my_vars[i]],
col = my_col[i],
pch = my_pch[i])
}
abline(h = seq(0,1, 0.05),
col = adjustcolor("black", alpha.f = 0.2))
legend("topleft",
col = my_col,
lty = my_lty,
pch = my_pch,
legend = my_vars)
library(leafletR)
library(rgdal) #for reading/writing geo files
library(rgeos) #for simplification
library(sp)
#####
# DIRECTORIES
#####
root <- "/home/joebrew/Documents/misc/leaflet_learn"
setwd(root)
#####
# READ AND TRANSFORM FLORIDA CHOROPLETH
#####
# Read in map
fl <- readOGR("counties", "FCTY2")
# convert to lat lon
fl <- spTransform(fl, CRS("+init=epsg:4326"))
# get x and y centroids
fl$x_centroid <- coordinates(fl)[,1]
fl$y_centroid <- coordinates(fl)[,2]
# create dataframe version of polygon data
fl_df <- fortify(fl, region = "id")
library(ggmap)
fl_df <- fortify(fl, region = "id")
head(fl@data)
fl_df <- fortify(fl, region = "NAME")
downloaddir<-paste0(getwd(), "/output")
downloaddir
download_dir<-paste0(getwd(), "/output")
filename<-list.files(download_dir, pattern=".shp", full.names=FALSE)
filename
download_dir<-paste0(getwd(), "/counties")
filename <- list.files(download_dir, pattern=".shp", full.names=FALSE)
filename<-gsub(".shp", "", filename)
filename
filename <- gsub(".shp|.xml", "", filename)
download_dir<-paste0(getwd(), "/counties")
filename <- list.files(download_dir, pattern=".shp", full.names=FALSE)
filename <- gsub(".shp|.xml", "", filename)
filename
# http://zevross.com/blog/2014/04/11/using-r-to-quickly-create-an-interactive-online-map-using-the-leafletr-package/
library(leafletR)
library(rgdal) #for reading/writing geo files
library(rgeos) #for simplification
library(sp)
library(ggmap)
#####
# DIRECTORIES
#####
root <- "/home/joebrew/Documents/misc/leaflet_learn"
setwd(root)
#####
# READ AND TRANSFORM FLORIDA CHOROPLETH
#####
# Read in map
fl <- readOGR("counties", "FCTY2")
# convert to lat lon
fl <- spTransform(fl, CRS("+init=epsg:4326"))
# get x and y centroids
fl$x_centroid <- coordinates(fl)[,1]
fl$y_centroid <- coordinates(fl)[,2]
# create dataframe version of polygon data
fl_df <- fortify(fl, region = "NAME")
#each_county <- fl#split(fl_df, fl_df$group)
#####
#
#####
download_dir<-paste0(getwd(), "/counties")
filename <- list.files(download_dir, pattern=".shp", full.names=FALSE)
filename <- gsub(".shp|.xml", "", filename)[1]
plot(fl)
fl@data
# http://zevross.com/blog/2014/04/11/using-r-to-quickly-create-an-interactive-online-map-using-the-leafletr-package/
library(leafletR)
library(rgdal) #for reading/writing geo files
library(rgeos) #for simplification
library(sp)
library(ggmap)
#####
# DIRECTORIES
#####
root <- "/home/joebrew/Documents/misc/leaflet_learn"
setwd(root)
#####
# READ AND TRANSFORM FLORIDA CHOROPLETH
#####
# Read in map
fl <- readOGR("counties", "FCTY2")
# convert to lat lon
fl <- spTransform(fl, CRS("+init=epsg:4326"))
# get x and y centroids
fl$x_centroid <- coordinates(fl)[,1]
fl$y_centroid <- coordinates(fl)[,2]
# create dataframe version of polygon data
fl_df <- fortify(fl, region = "NAME")
#each_county <- fl#split(fl_df, fl_df$group)
#####
#
#####
download_dir<-paste0(getwd(), "/counties")
filename <- list.files(download_dir, pattern=".shp", full.names=FALSE)
filename <- gsub(".shp|.xml", "", filename)[1]
# http://zevross.com/blog/2014/04/11/using-r-to-quickly-create-an-interactive-online-map-using-the-leafletr-package/
library(leafletR)
library(rgdal) #for reading/writing geo files
library(rgeos) #for simplification
library(sp)
library(ggmap)
#####
# DIRECTORIES
#####
root <- "/home/joebrew/Documents/misc/leaflet_learn"
setwd(root)
#####
# READ AND TRANSFORM FLORIDA CHOROPLETH
#####
# Read in map
fl <- readOGR("counties", "FCTY2")
# convert to lat lon
fl <- spTransform(fl, CRS("+init=epsg:4326"))
# get x and y centroids
fl$x_centroid <- coordinates(fl)[,1]
fl$y_centroid <- coordinates(fl)[,2]
# create dataframe version of polygon data
fl_df <- fortify(fl, region = "NAME")
#each_county <- fl#split(fl_df, fl_df$group)
#####
#
#####
download_dir<-paste0(getwd(), "/counties")
filename <- list.files(download_dir, pattern=".shp", full.names=FALSE)
filename <- gsub(".shp", "", filename)
file_name <- list.files(download_dir, pattern=".shp", full.names=FALSE)
file_name <- gsub(".shp", "", filename)
head(fl@data)
names(fl)[names(fl) == "N2"] <- "var"
head(fl@data)
fl$var <- fl@data[,"N3"]
# http://zevross.com/blog/2014/04/11/using-r-to-quickly-create-an-interactive-online-map-using-the-leafletr-package/
library(leafletR)
library(rgdal) #for reading/writing geo files
library(rgeos) #for simplification
library(sp)
library(ggmap)
#####
# DIRECTORIES
#####
root <- "/home/joebrew/Documents/misc/leaflet_learn"
setwd(root)
#####
# READ AND TRANSFORM FLORIDA CHOROPLETH
#####
# Read in map
fl <- readOGR("counties", "FCTY2")
# convert to lat lon
fl <- spTransform(fl, CRS("+init=epsg:4326"))
# get x and y centroids
fl$x_centroid <- coordinates(fl)[,1]
fl$y_centroid <- coordinates(fl)[,2]
# create dataframe version of polygon data
fl_df <- fortify(fl, region = "NAME")
#each_county <- fl#split(fl_df, fl_df$group)
#####
#
#####
download_dir<-paste0(getwd(), "/counties")
file_name <- list.files(download_dir, pattern=".shp", full.names=FALSE)
file_name <- gsub(".shp", "", filename)
# assign the field we want to map
fl$var <- fl@data[,"N3"]
head(fl@data)
fl_data<- fl@data
leafdat <- paste(download_dir, "/", file_name, ".geojson", sep="")
zipgj <- toGeoJSON(data = fl, dest = paste0(getwd(),"/output"))
cut(1:10)
?cut
cut(1:10, breaks = 5)
cuts <- cut(fl$var, breaks = 5)
cuts[1] <- 0 # ----- for this example make first cut zero
cuts
cuts <- as.character(cut(fl$var, breaks = 5))
cuts[1] <- 0 # ----- for this example make first cut zero
cuts
popup <- c("NAME", "var")
sty <- styleGrad(prop="var", breaks=cuts, right=FALSE, style.par="col",
style.val=rev(heat.colors(6)), leg="var", lwd=1)
map <- leaflet(data=zipgj, dest=download_dir, style=sty,
title="index", base.map="osm",
incl.data=TRUE,  popup=popup)
download_dir
browseURL(map)
sty <- styleGrad(prop="var", breaks=cuts, right=FALSE, style.par="col",
style.val=rev(heat.colors(5)), leg="var", lwd=1)
# ----- Create the map and load into browser
map <- leaflet(data=zipgj, dest=download_dir, style=sty,
title="index", base.map="osm",
incl.data=TRUE,  popup=popup)
# ----- to look at the map you can use this code
browseURL(map)
map
plot(map)
map
str(map)
cuts <- as.character(cut(fl$var, breaks = 6))
cuts[1] <- 0 # ----- for this example make first cut zero
# ----- Fields to include in the popup
popup <- c("NAME", "var")
# ----- Gradulated style based on an attribute
sty <- styleGrad(prop="var", breaks=cuts, right=FALSE, style.par="col",
style.val=rev(heat.colors(5)), leg="var", lwd=1)
# ----- Create the map and load into browser
map <- leaflet(data=zipgj, dest=download_dir, style=sty,
title="index", base.map="osm",
incl.data=TRUE,  popup=popup)
# ----- to look at the map you can use this code
browseURL(map)
leafdat <- paste(download_dir, "/", file_name, ".geojson", sep="")
leafdat
zipgj <- toGeoJSON(data = fl, dest = paste0(getwd(),"/output"))
cuts <- as.character(cut(fl$var, breaks = 6))
cuts[1] <- 0 # ----- for this example make first cut zero
# ----- Fields to include in the popup
popup <- c("NAME", "var")
# ----- Gradulated style based on an attribute
sty <- styleGrad(prop="var", breaks=cuts, right=FALSE, style.par="col",
style.val=rev(heat.colors(5)), leg="var", lwd=1)
sty
zipgj
?styleGrad
cuts<-round(quantile(fl$var, probs = seq(0, 1, 0.20), na.rm = FALSE), 0)
cuts
cuts[1] <- 0 # ----- for this example make first cut zero
# ----- Fields to include in the popup
popup <- c("NAME", "var")
# ----- Gradulated style based on an attribute
sty <- styleGrad(prop="var", breaks=cuts, right=FALSE, style.par="col",
style.val=rev(heat.colors(5)), leg="var", lwd=1)
# ----- Create the map and load into browser
map <- leaflet(data=zipgj, dest=download_dir, style=sty,
title="index", base.map="osm",
incl.data=TRUE,  popup=popup)
# ----- to look at the map you can use this code
browseURL(map)
map <- leaflet(data=zipgj, dest=download_dir, style=sty,
title="index", base.map="stamen-toner",
incl.data=TRUE,  popup=popup)
?lefalet
?leaflet
# ----- Create the map and load into browser
map <- leaflet(data=zipgj, dest=download_dir, style=sty,
title="index", base.map="tls",
incl.data=TRUE,  popup=popup)
# ----- to look at the map you can use this code
browseURL(map)
map <- leaflet(data=zipgj, dest=download_dir, style=sty,
title="index", base.map="water",
incl.data=TRUE,  popup=popup)
# ----- to look at the map you can use this code
browseURL(map)
heat.colors(5)
?Brewer.pal
?brewer.pal
library(RColorBrewer)
brewer.pal(5, "Blues")
sty <- styleGrad(prop="var", breaks=cuts, right=FALSE, style.par="col",
style.val=rev(brewer.pal(5, "Blues")), leg="var", lwd=1)
# ----- Create the map and load into browser
map <- leaflet(data=zipgj, dest=download_dir, style=sty,
title="index", base.map="water",
incl.data=TRUE,  popup=popup)
# ----- to look at the map you can use this code
browseURL(map)
sty <- styleGrad(prop="var", breaks=cuts, right=FALSE, style.par="col",
style.val=rev(brewer.pal(5, "Spectral")), leg="var", lwd=1)
# ----- Create the map and load into browser
map <- leaflet(data=zipgj, dest=download_dir, style=sty,
title="index", base.map="water",
incl.data=TRUE,  popup=popup)
# ----- to look at the map you can use this code
browseURL(map)
map <- leaflet(data=zipgj, dest=download_dir, style=sty,
title="index", base.map="water",
incl.data=TRUE,  popup=popup)
# ----- to look at the map you can use this code
browseURL(map)
plot(map)
sty <- styleGrad(prop="var", breaks=cuts, right=FALSE, style.par="col",
style.val=rev(brewer.pal(5, "Greens")), leg="var", lwd=1)
# ----- Create the map and load into browser
map <- leaflet(data=zipgj, dest=download_dir, style=sty,
title="index", base.map="water",
incl.data=TRUE,  popup=popup)
# ----- to look at the map you can use this code
browseURL(map)
map <- leaflet(data=zipgj, dest=download_dir, style=sty,
title="index", base.map="toner",
incl.data=TRUE,  popup=popup)
# ----- to look at the map you can use this code
browseURL(map)
map <- leaflet(data=zipgj, dest=download_dir, style=sty,
title="index", base.map="toner",
incl.data=TRUE,  popup=popup)
browseURL(map)
map <- leaflet(data=zipgj, dest=download_dir, style=sty,
title="index", base.map="mqsat",
incl.data=TRUE,  popup=popup)
# ----- to look at the map you can use this code
browseURL(map)
map <- leaflet(data=zipgj, dest=download_dir, style=sty,
title="index", base.map="toner",
incl.data=TRUE,  popup=popup)
# ----- to look at the map you can use this code
browseURL(map)
map <- leaflet(data=zipgj, dest=download_dir, style=sty,
title="index", base.map="mqsat",
incl.data=TRUE,  popup=popup)
# ----- to look at the map you can use this code
browseURL(map)
map <- leaflet(data=zipgj, dest=download_dir, style=sty,
title="index", base.map="mqosm",
incl.data=TRUE,  popup=popup)
# ----- to look at the map you can use this code
browseURL(map)
sty <- styleGrad(prop="var", breaks=cuts, right=FALSE, style.par="col",
style.val=rev(brewer.pal(5, "Reds")), leg="var", lwd=1)
# ----- Create the map and load into browser
map <- leaflet(data=zipgj, dest=download_dir, style=sty,
title="index", base.map="mqosm",
incl.data=TRUE,  popup=popup)
# ----- to look at the map you can use this code
browseURL(map)
map <- leaflet(data=zipgj, dest=download_dir, style=sty,
title="index", base.map="toner",
incl.data=TRUE,  popup=popup)
# ----- to look at the map you can use this code
browseURL(map)
sty <- styleGrad(prop="var", breaks=cuts, right=FALSE, style.par="col",
style.val=brewer.pal(5, "Reds"), leg="var", lwd=1)
# ----- Create the map and load into browser
map <- leaflet(data=zipgj, dest=download_dir, style=sty,
title="index", base.map="toner",
incl.data=TRUE,  popup=popup)
# ----- to look at the map you can use this code
browseURL(map)
library(rgbif)
install.packages("rgbif")
map <- leaflet(data=zipgj, dest=download_dir, style=sty,
title="index", base.map="toner",
incl.data=TRUE,  popup=popup)
gist(paste0(getwd(),"/home/joebrew/Documents/misc/leaflet_learn/counties/index/index.html"), description = "test")
library(rgbif)
gist(paste0(getwd(),"/home/joebrew/Documents/misc/leaflet_learn/counties/index/index.html"), description = "test")
.05 / (6/10)
minutes <- c(0.75, 0.5, 0.75, 0.75, 2.25, 1, 0.75, 0.75, 2.08333333333, 0.75, 1.75, 0.75)
sum(minutes)
.8333333 * .6
.8333333 / 6
.8333333 / 60
.8333333 / 6
50 / 60
13 * 14
shiny::runApp('~/Documents/ShinyApps/map_test')
library(leaflet)
library(RColorBrewer)
library(maps)
library(ggplot2)
library(rgdal)
shiny::runApp('~/Documents/ShinyApps/map_test')
shiny::runApp('~/Documents/ShinyApps/map_test')
shiny::runApp('~/Documents/ShinyApps/map_test')
shiny::runApp('~/Documents/ShinyApps/map_test')
shiny::runApp('~/Documents/ShinyApps/map_test')
shiny::runApp('~/Documents/ShinyApps/map_test')
fl_df <- fortify(fl, region = "NAME")
each_county <- fl#split(fl_df, fl_df$group)
each_county <- split(fl_df, fl_df$group)
names(each_county)
shiny::runApp('~/Documents/ShinyApps/map_test')
shiny::runApp('~/Documents/ShinyApps/map_test')
shiny::runApp('~/Documents/ShinyApps/map_test')
shiny::runApp('~/Documents/ShinyApps/map_test')
shiny::runApp('~/Documents/ShinyApps/map_test')
shiny::runApp('~/Documents/ShinyApps/map_test')

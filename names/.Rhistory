x <- hh[hh_number,]
x <- x[,-1]
# LINE 1
line1 <- paste0("HH number: ",
hh_number,
" ",
paste0(rep(" ", (5-chars)), collapse = ""),
" ",
"HH size: ",
paste0(1:7, "|", collapse = ""),
"\n")
# LINE 2
line2 <- paste0("Representative: ",
paste0(x[1,], "|", collapse = ""))
line2 <- toString(line2)
line2 <- gsub(" , ", "", line2)
line2 <- gsub(":", ": ", line2)
line2 <- gsub(", ", "|", line2)
line2 <- paste0("          ", line2, "\n", collapse = "")
complete_lines <- paste0(line1, line2, collapse = "")
toString(complete_lines)
}
#####
# WRITE TEXT FILE FOR USE AT fileformat.info
#####
# Instructions: http://www.fileformat.info/tool/label/mergeformat.htm
sink(paste0(wd, "/print_labels/output.txt"))
for (i in 1:3000){ cat(TableFun(i),"\n")}
sink()
?polygon
polygon(x = c(1:10, 10:1),
y = rep(1, 10), rep(2, 20))
polygon(x = c(1:10, 10:1),
y = rep(1, 10), rep(2, 10))
x = c(1:10, 10:1)
x = c(1:10, 10:1)
y = rep(1, 10), rep(2, 10)
polygon(x = x,
y = y)
x = c(1:10, 10:1)
y = rep(1, 10), rep(2, 10)
y = c(rep(1, 10), rep(2, 10))
polygon(x = x,
y = y)
plot(1:10, type = "n")
polygon(x = x,
y = y)
polygon(x = x,
y = y,
fill = "blue")
polygon(x = x,
y = y,
col = "blue")
months
months(1:12)
?months
months(as.Date(paste0("2015-", 1:12, "-01"), format = "%Y-%m-%d"))
ts <- (month = months(as.Date(paste0("2015-", c(12, 1:12), "-01"), format = "%Y-%m-%d")))
ts
#####
# SET WORKING DIRECTORY CONDITIONAL TO SYSTEM
#####
if ( Sys.info()["sysname"] == "Linux" ){
private <- "/media/joebrew/JB/fdoh/private/ab_chd_private"
public <- "/home/joebrew/Documents/fdoh/public/ab_chd_private"
} else {
private <- "E:/fdoh/private/ab_chd_private"
public <- "C:/Users/BrewJR/Documents/fdoh/public/ab_chd_private"
}
setwd(private)
#####
# READ IN THE DATA
#####
load(paste0(private, "/data/images/01_read_and_clean.RData"))
#####
# REESTABLISH WORKING DIRECTORY CONDITIONAL TO SYSTEM
#####
if ( Sys.info()["sysname"] == "Linux" ){
private <- "/media/joebrew/JB/fdoh/private/ab_chd_private"
public <- "/home/joebrew/Documents/fdoh/public/ab_chd_private"
} else {
private <- "E:/fdoh/private/ab_chd_private"
public <- "C:/Users/BrewJR/Documents/fdoh/public/ab_chd_private"
}
setwd(private)
#####
# LOAD PACKAGES
#####
library(xtable)
library(Hmisc)
library(gvlma)
library(car)
library(ResourceSelection)
library(Hmisc)
library(dplyr)
library(RCurl)
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
#####
# SET SEED
#####
set.seed(1)
# #####
# # READ IN BUCHHOLZ DATA (to respond to Parker's late november 2014 query)
# #####
load("/media/joebrew/JB/fdoh/private/buchholz_experiment/data/all_schools_cleaned.RData")
source('~/.active-rstudio-document', echo=TRUE)
unique(sort(bu$school))
bu <-bu[which(bu$school != "Santa Fe"),]
yesyes <- nrow(bu[which(bu$pre_int_bi == "yes" &
bu$post_int_bi == "yes"),])
yesno <- nrow(bu[which(bu$pre_int_bi == "yes" &
bu$post_int_bi == "no"),])
noyes <- nrow(bu[which(bu$pre_int_bi == "no" &
bu$post_int_bi == "yes"),])
nono <- nrow(bu[which(bu$pre_int_bi == "no" &
bu$post_int_bi == "no"),])
library(xtable)
temp <- table(ifelse(bu$pre_int_bi == "yes", "prior intent", "no prior intent"))
temp
noyes / (nono+noyes)
yesyes / (yesno + yesyes)
yesno / (yesno + yesyes)
source('~/.active-rstudio-document', echo=TRUE)
bu <- bu[which(bu$school == "Santa Fe"),]
yesyes <- nrow(bu[which(bu$pre_int_bi == "yes" &
bu$post_int_bi == "yes"),])
yesno <- nrow(bu[which(bu$pre_int_bi == "yes" &
bu$post_int_bi == "no"),])
noyes <- nrow(bu[which(bu$pre_int_bi == "no" &
bu$post_int_bi == "yes"),])
nono <- nrow(bu[which(bu$pre_int_bi == "no" &
bu$post_int_bi == "no"),])
yesno / (nono + yesno)
nono
noyes
yesyes
yesno
shiny::runApp('ShinyApps/controlfluteams')
install.packages("RCurl")
library(RCurl)
my_link <- "https://docs.google.com/spreadsheets/d/1icEDpqkJVNuvGLV6GcULuvfVK0healPyPep3enHkceE/export?gid=0&format=csv"
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
my_csv <- getURL(my_link)
dat <- read.csv(textConnection(my_csv))
library(ggthemes)
library(XML)
library(ggplot2)
install.packages("ggthemes")
m <- c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec")
df<-as.data.frame(m)
df$n<-1:12
##Sample URL
##Each url had unique "skip" issues in read.fwf so a loop wouldn't work for all these
url2014<-"http://www.arrs.net/MaraList/ML_2014.htm"
data<-readLines(url2014)
##Remove Country headers
records<-grep("<",data,invert=TRUE,value=TRUE)
records<-grep("^[A-Z]",records,value=TRUE)
write(records,"records.txt")
getwd()
times<-read.fwf('records.txt',comment.char="",
col.names=c("Country","Day","Month",
"Location","Time_Male",
"Name_Male","Time_Female","Name_Female"),
widths=c(6,3,5,86,12,32,12,32))
times$Time_Male<-strptime(times$Time_Male,"%H:%M:%S")
times$Time_Female<-strptime(times$Time_Female,"%H:%M:%S")
##Some redundancy here perhaps
times$Time_Male<-as.POSIXlt(times$Time_Male,format="%H:%M:%S")
times$Time_Female<-as.POSIXlt(times$Time_Female,format="%H:%M:%S")
##Remove blank space in Months and Countries
times$Month<-gsub("^\\s+|\\s+$", "",times$Month)
times$Country<-gsub("^\\s+|\\s+$", "",times$Country)
times$month<-df$n[match(times$Month,df$m)]
times$Date<-as.Date( paste(times$month,times$Day,sep="."),format="%m.%d")
times$Year<-2014
time2014<-times
head(times2014)
head(time2014)
ggplot(aes(x=Year,y=Time_Female),data=subset(maradatabase,maradatabase$Country=="USA"))
+geom_jitter(color='white',alpha=.1,size=5)+theme_solarized(light=FALSE)+
scale_x_continuous(breaks=c(2005,2006,2007,2008,2009,2010,2011,2012,2013,2014))+
geom_smooth()+ggtitle("Marathon Winning Times for Females - USA")+ylab("Times")
library(RCurl)
my_link <- "https://docs.google.com/spreadsheets/d/1icEDpqkJVNuvGLV6GcULuvfVK0healPyPep3enHkceE/export?gid=0&format=csv"
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
my_csv <- getURL(my_link)
dat <- read.csv(textConnection(my_csv))
head(dat)
library(dplyr)
?weighted.mean()
library(dplyr)
ts <- dat %>%
group_by(year, type) %>%
summarise(ir = weighted.mean(x = immRate, w = totMem))
ts
ts[which(ts$type == "elem"),]
ts[which(ts$type == "multi"),]
ts[which(ts$type == "elem"),]
ts[which(ts$type == "mid"),]
ts[which(ts$type == "high"),]
ts[which(ts$type == "elem"),]$ir
barplot(ts[which(ts$type == "elem"),]$ir)
head(ts)
t(ts)
View(t(ts))
head(ts)
barplot(ts$ir)
dat$id[which(grepl("Queen", dat$school))]
dat$paul_type <- dat$type
dat$id[which(grepl("Jord", dat$school))]
#####
dat$paul_type <- dat$type
dat$paul_type[which(dat$id == -13)] <- "elem" # Queen of peace
dat$paul_type[which(dat$id == -9)] <- "elem" # Jordan Glenn
#####
# CALCULATE IR BY TYPE BY YEAR
#####
library(dplyr)
ts <- dat %>%
group_by(year, paul_type) %>%
summarise(ir = weighted.mean(x = immRate, w = totMem))
ts[which(ts$paul_type == "elem"),]
fl <- read.csv("/media/joebrew/JB/fdoh/private/flShots/flShotsAllYearsAlachua.csv")
#########################
# MAKE AN ESTIMATED GRADE COLUMN IN FLSHOTS
#########################
fl$grade <- factor(ifelse(fl$Age <= 4,
"Pre-K",
ifelse(fl$Age >= 5 &
fl$Age <= 10,
"Elementary",
ifelse(fl$Age >= 11 &
fl$Age <= 13,
"Middle",
ifelse(fl$Age >= 14 &
fl$Age <= 17,
"High",
NA)))),
levels=c("Pre-K", "Elementary", "Middle", "High"))
#########################
# READ IN TOTAL SCHOOL MEMBERSHIP DATA FOR 2013-14
# (from: http://www.fldoe.org/eias/eiaspubs/archives.asp)
#########################
totMem13 <- read.csv("/media/joebrew/JB/fdoh/private/flShots/totMem1314.csv", as.is=TRUE)
totMem12 <- read.csv("/media/joebrew/JB/fdoh/private/flShots/totMem1213.csv", skip=6, as.is=TRUE)
totMem11 <- read.csv("/media/joebrew/JB/fdoh/private/flShots/totMem1112.csv", skip=4, as.is=TRUE)
totMem10 <- read.csv("/media/joebrew/JB/fdoh/private/flShots/totMem1011.csv", skip=4, as.is=TRUE)
totMem09 <- read.csv("/media/joebrew/JB/fdoh/private/flShots/totMem0910.csv", skip=2, as.is=TRUE)
totMem13 <- totMem13[which(totMem13$DISTRICT.NAME == "ALACHUA" &
totMem13$SCHOOL.NAME != "DISTRICT TOTAL"),]
totMem12 <- totMem12[which(totMem12$DISTRICT == "ALACHUA" &
totMem12$SCHOOL != "DISTRICT TOTAL"),]
totMem11 <- totMem11 <- totMem11[which(totMem11$DISTRICT == "ALACHUA" &
totMem11$SCHOOL != "DISTRICT TOTAL"),]
totMem10 <- totMem10 <- totMem10[which(totMem10$District.Name == "ALACHUA" &
totMem10$School.Name != "DISTRICT TOTAL"),]
totMem09 <- totMem09[which(totMem09$DISTRICT.NAME == "ALACHUA" &
totMem09$SCHOOL.NAME != "DISTRICT TOTAL"),]
#add year columns
totMem13$Year <- 2013
totMem12$Year <- 2012
totMem11$Year <- 2011
totMem10$Year <- 2010
totMem09$Year <- 2009
colnames(totMem13) <- toupper(gsub("[.]", "", colnames(totMem13)))
colnames(totMem12) <- toupper(gsub("[.]", "", colnames(totMem12)))
colnames(totMem11) <- toupper(gsub("[.]", "", colnames(totMem11)))
colnames(totMem10) <- toupper(gsub("[.]", "", colnames(totMem10)))
colnames(totMem09) <- toupper(gsub("[.]", "", colnames(totMem09)))
colnames(totMem13)[4] <- "School"
colnames(totMem12)[4] <- "School"
colnames(totMem11)[4] <- "School"
colnames(totMem10)[4] <- "School"
colnames(totMem09)[4] <- "School"
totMem13 <- totMem13[colnames(totMem13)[c(4:18, 20)]]
totMem12 <- totMem12[colnames(totMem12)[c(4:18, 20)]]
totMem11 <- totMem11[colnames(totMem11)[c(4:18, 20)]]
totMem10 <- totMem10[colnames(totMem10)[c(4:18, 20)]]
totMem09 <- totMem09[colnames(totMem09)[c(4:18, 20)]]
totMem <- as.data.frame(rbind(totMem13,
totMem12,
totMem11,
totMem10,
totMem09))
#########################
# CLEAN UP, REMOVE HASHTAGS AND COMMAS, MAKE NUMERIC
#########################
for (i in colnames(totMem)[-1]){
totMem[,i] <- as.numeric(as.character(gsub(",", "",totMem[,i])))
}
#produces warnings.  NAs.  OK.
#########################
# WRITE TOTMEM INTO A CLEANED CSV
head(fl)
ts[which(ts$paul_type == "elem"),]
ts[which(ts$paul_type == "mid"),]
ts[which(ts$paul_type == "high"),]
nrow(dat[which(dat$type == "high" & dat$year == 2009),])
setwd("/home/joebrew/Documents/misc/names")
es <- readLines("/home/joebrew/Documents/misc/names/NamesDatabases/first names/non-normalized/es.txt",
warn = FALSE)
es <- data.frame(name = es, country = "es")
us <- readLines("/home/joebrew/Documents/misc/names/NamesDatabases/first names/us.txt",
warn = FALSE)
us <- data.frame(name = us, country = "us")
all <- readLines("/home/joebrew/Documents/misc/names/NamesDatabases/first names/all.txt",
warn = FALSE)
all <- data.frame(name = all, country = "all")
# Sample
sample(all$name, 1)
head(all)
balears <- read.csv("/home/joebrew/Documents/misc/names/balears.csv")
balears <- read.csv("/home/joebrew/Documents/misc/names/balears.csv", skip = 8)
head(balears)
names(balears)
names(balears) <- c("name", "illes_balears", "mallorca", "petra", "x")
random_name <- function(df = balears){
sample(df$name, 1)
}
randon_name
random_name()
balears <- read.csv("/home/joebrew/Documents/misc/names/balears.csv", skip = 8,
stringsAsFactors = FALSE)
names(balears) <- c("name", "illes_balears", "mallorca", "petra", "x")
random_name <- function(df = balears){
sample(df$name, 1)
}
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
library(dplyr)
catala <- xmlParse("catala.xml")
library(plyr)
catala <- xmlParse("catala.xml")
library(XML)
catala <- xmlParse("catala.xml")
class(catala)
xmlfile <- xmlParse("catala.xml")
class(xmlfile)
xmltop = xmlRoot(xmlfile) #gives content of root
class(xmltop)#"XMLInternalElementNode" "XMLInternalNode" "XMLAbstractNode"
xmlName(xmltop) #give name of node, PubmedArticleSet
xmlSize(xmltop) #how many children in node, 19
xmlName(xmltop[[1]]) #name of root's children
xmlfile <- xmlParse("catala.xml")
#Turning XML into a dataframe
library(XML)
xmlfile <- xmlParse("catala.xml")
#Turning XML into a dataframe
catala=ldply(xmlToList("catala.xml"), data.frame) #completes with errors: "row names were found from a short variable and have been discarded"
View(catala) #for easy checking that the data is properly formatted
x <- xmlToList("catala.xml")
x[[1]]
x[[2]]
x[[3]]
catala=ldply(x, data.frame)
?ldply
unlist(x)
data.frame(unlist(x))
data.frame(unlist(x), ncol = 3)
as.data.frame(unlist(x))
?as.data.frame
data.frame(matrix(unlist(x), ncol = 4, byrow = T))
data.frame(matrix(unlist(x), ncol = 3, byrow = T))
data.frame(matrix(unlist(x), ncol = 2, byrow = T))
data.frame(matrix(unlist(x), ncol = 5, byrow = T))
data.frame(matrix(unlist(x), ncol = 4, byrow = F))
data.frame(matrix(unlist(x), nrow = length(list), byrow = F))
data.frame(matrix(unlist(x), nrow = length(list), byrow = T))
co.call(rbind.data.frame, x)
do.call(rbind.data.frame, x)
do.call(rbind.fill, x)
my_list <- list()
?assign
get("all")
my_list <- list()
for (i in 1:length(x)){
assign(paste0("df", i), data.frame(matrix(unlist(x[[i]]), nrow = 1, byrow = T)))
my_list[[i]] <- get(paste0("df", i))
}
do.call(rbind.fill, my_list)
catala <- do.call(rbind.fill, my_list)
head(catala)
names(catala)
head(df1004)
names(df1)[1:2]
names(df1)[1:4]
names(df1)[1:7]
y <- data.frame("hi" = 1:10)
names(get("y"))
names(get("y")) <- "ho"
View(catala)
head(catala)
catala[1:5, 1:3]
names(catala)[1:2] <- c("nom", "nombre")
random_name <- function(df = catala, var_name = "nom"){
sample(df[,var_name], 1)
}
random_name()
catala$nom <- as.character(catala$nom)
catala$nombre <- as.character(catala$nombre)
random_name <- function(df = catala, var_name = "nom"){
sample(df[,var_name], 1)
}
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
head(all)
head(balears)
random_name <- function(df = balears, var_name = "name"){
sample(df[,var_name], 1)
}
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
random_name()
Sys.sleep(2)
for (i in 1:nrow(balears)){print(balears$name[i]);Sys.sleep(0.5)}
x <- sample(balears$name, nrow(balears))
x <- sample(balears$name, nrow(balears))
for (i in 1:lengths(balears)){print(x[i]);Sys.sleep(1)}
for (i in 1:length(balears)){print(x[i]);Sys.sleep(1)}
for (i in 1:length(x)){print(x[i]);Sys.sleep(1)}
length(x)

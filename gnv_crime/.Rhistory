cost <- function(printing = 0.5612, # this assumes the same distr. of double/single
distributing = 0.00982, # consent form only
review_clerk_hours = 0.158, # 30% of clerk time at rate of 5.23 per student + transport
updating_registry = 1.046, # 20% of clerk time at rate of 5.23 per student
office_supplies = 0, # 29.28 entire program
equipment = 0, # coolers ~ $50, 8 of em = should be 0.03 per student
communication_with_parents = 0.05, # 1% of clerk time at 5.23 per student
translation = 0, # nothing!
rn_hours = 0.033, # 0.10, # BRAD = 2 minutes per kid # SBAC 6 minutes per student (assuming ~400 students per school)
billing_clerk_hours = 0.26, # 49% of clerk time at 5.23 per student at $10 an hour
transportation = 0.00982, # doubled for second doses  (in formula below)
medical_supplies = 0.30, # fixed med cost + var med costs{tissues,etc.} / imm. student
assist_with_clinics = 0, # negligible - assuming teacher or volunteer
double_dose = FALSE,
rn_wage = 25,
clerk_wage = 10,
bare_bones = FALSE,
private = TRUE,
private_vaccine_cost = 17.5,
public_vaccine_cost = 0){
########## BEGIN FUNCTION
if(double_dose){
rn_hours <- 2 * rn_hours
billing_clerk_hours <- 2 * billing_clerk_hours
updating_registry <- 2 * updating_registry
transportation <- 2 * transportation
medical_supplies <- 2 * medical_supplies
assist_with_clinics <- 2 * assist_with_clinics
private_vaccine_cost <- 2* private_vaccine_cost
public_vaccine_cost <- 2 * public_vaccine_cost
}
# Convert rn_hours to dollar amount
rn_dollars <- rn_hours * rn_wage
# Convert clerk_hours to dollar amoung
clerk_dollars <- (billing_clerk_hours + review_clerk_hours) * clerk_wage
if(bare_bones){
x <- sum(printing,
distributing,
transportation,
medical_supplies)
} else {
x <- sum(c(printing,
distributing,
updating_registry,
office_supplies,
equipment,
communication_with_parents,
translation,
rn_dollars,
clerk_dollars,
transportation,
medical_supplies,
assist_with_clinics))
}
# Add vaccine cost
if(private){
x <- x + private_vaccine_cost
} else{
x <- x + public_vaccine_cost
}
return(x)
}
cost()
library(RCurl)
#########
# SET LOCAL WORKING DIRECTORY
#########
#setwd("C:/Users/BrewJR/Documents/misc") # change this line to whereever you cloned misc
setwd("/home/joebrew/Documents/misc/")
setwd("gnv_crime")
# define the link for gainesville crime
my_link1 <- "http://data.cityofgainesville.org/api/views/9ccb-cyth/rows.csv"
my_link2 <- getURL(my_link1)
# read in the data
gnv <- read.csv(my_link1)
my_link1 <- "http://data.cityofgainesville.org/api/views/9ccb-cyth/rows.csv"
my_link2 <- getURL(my_link1)
# read in the data
gnv <- read.csv(my_link1)
library(rgdal)
#library(sp)
zip <- readOGR("zips_alachua", "ACDPS_zipcode")
zip <- spTransform(zip, CRS("+init=epsg:4326"))
zip$zip <- as.numeric(as.character(zip$ZIP))
library(rCharts)
# read in geojson version of zip
#zip_geoj <- readOGR("zips_alachua", "ACDPS_zipcode")
mymap <- Leaflet$new()
mymap$tileLayer(provider = "Stamen.TonerLite")
mymap$setView(c(29.65, -82.3), zoom = 10)
mymap$enablePopover(TRUE)
mymap$fullScreen(TRUE)
for (i in 1:100){
mymap$marker(c(gnv$lat[i], gnv$lon[i]),
bindPopup = paste(gnv$Narrative[i],
gnv$Offense.Date[i]))
}
mymap
library(leafletR)
install.packages("leafletR")
library(leafletR)
zip_df <- data.frame(zip)
zipgj <- toGeoJSON(data = zip_df)
# Read in polygon shapefile using handy maptools function
test <- zip
# Extract the list of Polygons objects
polys <- slot(test,"polygons")
polys_list <- list()
# Within each Polygons object
#    Extract the Polygon list (assuming just one per Polygons)
#    And Extract the coordinates from each Polygon
for (i in 1:length(polys)) {
#print(paste("Polygon #",i))
polys_list[[i]] <-  slot(slot(polys[[i]],"Polygons")[[1]],"coords")
}
xy <- polys_list[2]
xy <- matrix(unlist(xy), ncol = 2)
xyjson = RJSONIO::toJSON(xy)
jsonX = paste(
'{"type":"FeatureCollection","features":[
{"type":"Feature",
"properties":{"region_id":1, "region_name":"My Region"},
"geometry":{"type":"Polygon","coordinates": [ ',xyjson,' ]}}]}')
polys = RJSONIO::fromJSON(jsonX)
mymap = Leaflet$new()
mymap$tileLayer(provider = "Stamen.TonerLite")
mymap$setView(c(29.65, -82.3), zoom = 10)
mymap$enablePopover(TRUE)
mymap$geoJson(polys)
mymap
getwd()
fl <- readOGR(". ", "fl_zcta")
fl <- readOGR("fl_zcta", "tl_2010_12_zcta510")
plot(fl)
fl <- readOGR("counties", "FCTY2")
plot(fl)
library(leafletR)
fl_df <- data.frame(fl)
# Make fl_df into a gesjson object
fl_gj <- toGeoJSON(data = fl_df)
polys <- slot(fl,"polygons")
polys_list <- list()
# Within each Polygons object
#    Extract the Polygon list (assuming just one per Polygons)
#    And Extract the coordinates from each Polygon
for (i in 1:length(polys)) {
#print(paste("Polygon #",i))
polys_list[[i]] <-  slot(slot(polys[[i]],"Polygons")[[1]],"coords")
}
xy <- polys_list[2]
xy <- matrix(unlist(xy), ncol = 2)
xy
# turn coordinates into json
xyjson = RJSONIO::toJSON(xy)
jsonX = paste(
'{"type":"FeatureCollection","features":[
{"type":"Feature",
"properties":{"region_id":1, "region_name":"My Region"},
"geometry":{"type":"Polygon","coordinates": [ ',xyjson,' ]}}]}')
polys = RJSONIO::fromJSON(jsonX)
mymap = Leaflet$new()
mymap$tileLayer(provider = "Stamen.TonerLite")
mymap$setView(c(29.65, -82.3), zoom = 10)
mymap$enablePopover(TRUE)
mymap$geoJson(polys)
mymap
xy <- polys_list#[1]
joe <- list()
for (i in 1:length(polys_list)){
xyz <- matrix(unlist(xy[[i]]), ncol = 2)
xyjson = RJSONIO::toJSON(xyz)
jsonX = paste(
'{"type":"FeatureCollection","features":[
{"type":"Feature",
"properties":{"region_id":1, "region_name":"My Region"},
"geometry":{"type":"Polygon","coordinates": [ ',xyjson,' ]}}]}')
polys = RJSONIO::fromJSON(jsonX)
joe[[i]] <- polys
}
mymap = Leaflet$new()
mymap$tileLayer(provider = "Stamen.TonerLite")
mymap$setView(c(29.65, -82.3), zoom = 10)
mymap$enablePopover(TRUE)
mymap$geoJson(joe[[10]])
mymap
mymap$geoJson(joe[[1]])
mymap
fl <- readOGR("counties", "FCTY2")
# make fl into a dataframe
fl_df <- data.frame(fl)
# Make fl_df into a gesjson object
fl_gj <- toGeoJSON(data = fl_df)
# Extract the list of Polygons objects
polys <- slot(fl,"polygons")
polys_list <- list()
for (i in 1:length(polys)) {
#print(paste("Polygon #",i))
polys_list[[i]] <-  slot(slot(polys[[i]],"Polygons")[[1]],"coords")
}
xy <- polys_list#[1]
joe <- list()
for (i in 1:length(polys_list)){
xyz <- matrix(unlist(xy[[i]]), ncol = 2)
xyjson = RJSONIO::toJSON(xyz)
jsonX = paste(
'{"type":"FeatureCollection","features":[
{"type":"Feature",
"properties":{"region_id":1, "region_name":"My Region"},
"geometry":{"type":"Polygon","coordinates": [ ',xyjson,' ]}}]}')
polys = RJSONIO::fromJSON(jsonX)
joe[[i]] <- polys
}
lenght(joe)
length(joe)
for (i in 1:length(joe)){
mymap$geoJson(joe[[i]])
}
mymap
plot(joe[[22]])
joe[[22]]
for (i in 1:length(joe)){
mymap$geoJson(joe[[i]]).addtTo(mymap)
}
#my
for (i in 1:length(joe)){
mymap$geoJson(joe[[i]]).addTo(mymap)
}

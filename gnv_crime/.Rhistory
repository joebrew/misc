library(devtools)
library(devtools)
library(Rtools)
library(devtools)
install.packages("devtools", dependencies = TRUE)
install.packages("devtools")
library(devtools)
install.packages("httr")
install.packages("httr", dependencies = TRUE)
install.packages("devtools")
library(devtools)
update.packages("devtools")
library(devtools)
library(plyr)
install.packages("plyr")
install.packages("devtools")
packageVersion("devtools")
sessionInfo()
library(devtools)
install_github("joebrew/rpackages", subdir = "cdph")
bcol <- adjustcolor("darkgreen", alpha.f=0.4)
ycol <- adjustcolor("darkblue", alpha.f=0.4)
x <- (1:1000)^(1/2)
y <- (1:1000)^3
plot(x,y, type = "n",
xlab = "Time",
ylab = "Value",
xaxt = "n",
yaxt = "n")
b <- rev(y)
plot(x,y, type = "n",
xlab = "Time",
ylab = "Value",
xaxt = "n",
yaxt = "n")
lines(x,b, col = bcol, lwd = 5)
text(x[100], b[100],
labels = "Risk of infection",
col = bcol)
lines(x,y, col = ycol, lwd =5)
text(x[800], y[800],
labels = "Likelihood of hesitancy",
col = ycol)
x <- sample(1:1000, 1000)
y <- sample(1:1000, 1000)
mycol <- sample(c(rep("blue", 19), "red"), 1000, replace = TRUE)
mycol <- adjustcolor(mycol, alpha.f=0.6)
plot(x,y, col = mycol, pch = 16, cex =2,
xaxt = "n", xlab = NA, yaxt = "n", ylab = NA)
plot(x,y, col = mycol, pch = 16, cex =2,
xaxt = "n", xlab = NA, yaxt = "n", ylab = NA)
##################################
library(RODBC) # Read in the
install.packages("RODBC")
bm <- odbcConnect("vw_BirthMaster", uid="BrewJR", pwd="stopFlu2013")
library(RODBC) # Read in the
bm <- odbcConnect("vw_BirthMaster", uid="BrewJR", pwd="stopFlu2013")
bm <- odbcConnect("HMS01 Shadow", uid="BrewJR", pwd="Colometa08")
bm <- odbcConnect("HMS01 Shadow")
x <- c("25 (%)", "35(%)")
gsub(["(%)"], "", x)
gsub("[(%)]", "", x)
ls()
dir()
stem(1:10)
stem(seq(1,10,by=0.05))
library(gdata)
install.packages("weatherData")
library(weatherData)
# Get weather for just one day
getWeatherForDate("GNV", "2014-04-14")
# Get weather for a period of time
start <- as.Date("2014-01-01", format = "%Y-%m-%d") # define jan 1 2014 as start
x <- getSummarizedWeather("GNV", start_date = start,
end_date = Sys.Date() - 1,
opt_custom_columns = TRUE,
custom_columns = c(2,4,20))
# Glimpse at your data
head(x)
# Plot rainfall
plot(x$Date, as.numeric(x$PrecipitationIn),
cex = as.numeric(x$PrecipitationIn),
col = adjustcolor("red", alpha.f=0.4),
pch = 16)
lines(x$Date, as.numeric(x$PrecipitationIn),
col = adjustcolor("black", alpha.f = 0.4))
# Plot max temperature
plot(x$Date, x$Max_TemperatureF,
col = adjustcolor("darkred", alpha.f = 0.3),
pch = 16)
# Add min temperature
points(x$Date, x$Min_TemperatureF,
col = adjustcolor("darkblue", alpha.f = 0.3),
pch = 16,
add = T)
setwd("C:/Users/BrewJR/Documents/misc") # change this line to whereever you cloned misc
setwd("gnv_crime")
# define the link for gainesville crime
my_link1 <- "https://data.cityofgainesville.org/api/views/9ccb-cyth/rows.csv"
# read in the data
gnv <- read.csv(my_link1)
# write a function to clean lat lon points
DegreesToDecimals <- function(x){
# split the string to keep only the lat, lon, part
a <- do.call(rbind, strsplit(as.character(x), "\n"))
aa <- a[,3]
# now split at the comma
b <- do.call(rbind, strsplit(as.character(aa), ","))
bb <- b#[,2]
# make df
bb <- data.frame(bb)
# fix names
names(bb) <- c("lat", "lon")
# remove parentheses
bb$lat <- as.numeric(gsub("\\(|\\)", "", bb$lat))
bb$lon <- as.numeric(gsub("\\(|\\)", "", bb$lon))
return(bb)
}
x <- DegreesToDecimals(gnv$Location.1)
# now join x to gnv
gnv <- cbind(gnv, x)
rm(x)
# plot the points on a florida map
library(maps)
map("county", "florida")
points(gnv$lon, gnv$lat, col = "red")
# Plot the points on an Alachua map
library(rgdal)
library(sp)
zip <- readOGR("zips_alachua", "ACDPS_zipcode")
zip <- spTransform(zip, CRS("+init=epsg:4326"))
plot(zip, col = "grey", border = "white")
points(gnv$lon, gnv$lat,
col = adjustcolor(rainbow(nrow(gnv)), alpha.f = 0.3),
pch = 1,
cex = 0.3)
head(gnv)
table(gnv$Narrative)
levels(gnv$Narrative)
library(RColorBrewer)
my_colors <- colorRampPalette(Spectral)(60)
library(RColorBrewer)
my_colors <- colorRampPalette(Spectral)(60)
my_colors <- colorRampPalette(brewer.pal("Spectral", 9))(60)
my_colors <- colorRampPalette(brewer.pal(9, "Spectral"))(60)
my_colors <- colorRampPalette(brewer.pal(9, "Spectral"))(length(levels(gnv$Narrative)))
barplot(summary(gnv$Narrative), col = my_colors)
my_colors <- colorRampPalette(brewer.pal(2, "Spectral"))(length(levels(gnv$Narrative)))
my_colors <- colorRampPalette(brewer.pal(3, "Spectral"))(length(levels(gnv$Narrative)))
barplot(summary(gnv$Narrative), col = my_colors)
barplot(summary(gnv$Narrative), col = my_colors, border = FALSE)
gnv$col <- my_colors[as.numeric(gnv$Narrative)]
plot(zip, col = "grey", border = "white")
points(gnv$lon, gnv$lat,
col = adjustcolor(gnv$col, alpha.f = 0.3),
pch = 16,
cex = 0.3)
brewer.pal(3, "Spectral")
length(levels(gnv$Narrative))
plot(zip, col = "grey", border = "white")
points(gnv$lon, gnv$lat,
col = adjustcolor(gnv$col, alpha.f = 0.3),
pch = 16,
cex = 0.5)
plot(zip, col = "grey", border = "white")
points(gnv$lon, gnv$lat,
col = adjustcolor(gnv$col, alpha.f = 0.5),
pch = 16,
cex = 0.5)
library(rCharts)
install.packages("rCharts")
library(devtools)
install_github("rCharts", "ramnathv")
library(rCharts)
map3 <- Leaflet$new()
map3$setView(c(51.505, -0.09), zoom = 13)
map3$marker(c(51.5, -0.09), bindPopup = "<p> Hi. I am a popup </p>")
map3$marker(c(51.495, -0.083), bindPopup = "<p> Hi. I am another popup </p>")
map3$print("chart7")
plot(map3)
map3
mymap <- Leaflet$new()
mymap$setView(c(29, -82.3), zoom = 13)
mymap <- Leaflet$new()
mymap$setView(c(29, -82.3), zoom = 13)
mymap$marker(c(51.5, -0.09), bindPopup = "<p> Hi. I am a popup </p>")
mymap$marker(c(51.495, -0.083), bindPopup = "<p> Hi. I am another popup </p>")
mymap
mymap$setView(c(29, -82.3), zoom = 5)
mymap
mymap$setView(c(29, -82.3), zoom = 7)
mymap
mymap$setView(c(29, -82.3), zoom = 9)
mymap
mymap$setView(c(293, -82.2), zoom = 9)
mymap
mymap$setView(c(29.3, -82.2), zoom = 9)
mymap
mymap$setView(c(29.4, -82.1), zoom = 9)
mymap
mymap$setView(c(29.5, -82.1), zoom = 9)
mymap
mymap$setView(c(29.5, -82.1), zoom = 10)
mymap
mymap$setView(c(29.55, -82.12), zoom = 10)
mymap
points(gnv$lon, gnv$lat,
col = adjustcolor(gnv$col, alpha.f = 0.5),
pch = 16,
cex = 0.5)
mymap <- Leaflet$new()
mymap$setView(c(29.55, -82.12), zoom = 10)
mymap$marker(gnv$lon, gnv$lat)
mymap
mymap <- Leaflet$new()
mymap$setView(c(29.55, -82.12), zoom = 10)
mymap$marker(gnv$lon[1:10], gnv$lat[1:10])
mymap <- Leaflet$new()
mymap$setView(c(29.55, -82.12), zoom = 10)
mymap
gnv$lon[1:10]
summary(mymap)
mymap$marker(c(gnv$lon[1:10], gnv$lat[1:10]))
mymap
mymap <- Leaflet$new()
mymap$setView(c(29.55, -82.12), zoom = 10)
mymap$marker(c(gnv$lon[1:100], gnv$lat[1:100]))
mymap
library(googleVis)
install.packages("googleVis")
library(googleVis)
library(googleVis)
google.location <- paste(gnv$lat, gnv$lon, sep = ":")
monitors.google <- data.frame(monitors, google.location)
google.location <- paste(gnv$lat, gnv$lon, sep = ":")
gnv.google <- data.frame(gnv, google.location)
g.inter.map <- gvisMap(data = gnv.google, locationvar = "google.location",
tipvar = "name")
plot(g.inter.map)
mymap <- Leaflet$new()
mymap$setView(c(29.55, -82.12), zoom = 10)
mymap$marker(c(gnv$lon[1:100], gnv$lat[1:100]))
mymap
c(gnv$lon[1:100], gnv$lat[1:100])
c(gnv$lon[1], gnv$lat[1])
mymap <- Leaflet$new()
mymap$setView(c(29.55, -82.12), zoom = 10)
for (i in 1:100){
mymap$marker(c(gnv$lon[i], gnv$lat[i]))
}
mymap$marker(c(gnv$lon[1:100], gnv$lat[1:100]))
mymap
mymap <- Leaflet$new()
mymap$setView(c(29.55, -82.12), zoom = 10)
mymap$marker(c(gnv$lat[1:100], gnv$lon[1:100]))
mymap
mymap <- Leaflet$new()
mymap$setView(c(29.55, -82.12), zoom = 10)
for (i in 1:100){
mymap$marker(c(gnv$lat[i], gnv$lon[i]))
}
mymap
names(gnv)
mymap <- Leaflet$new()
mymap$setView(c(29.55, -82.12), zoom = 10)
for (i in 1:100){
mymap$marker(c(gnv$lat[i], gnv$lon[i]),
bindPopup = gnv$Narrative[i])
}
mymap
map <- createLeafletMap(session, "mymap")
mymap <- Leaflet$new()
mymap$setView(c(29.55, -82.12), zoom = 10)
for (i in 1:100){
mymap$marker(c(gnv$lat[i], gnv$lon[i]),
bindPopup = paste(gnv$Narrative[i],
gnv$Offense.Date[i]))
}
mymap
library(googleVis)
google.location <- paste(gnv$lat, gnv$lon, sep = ":")
gnv.google <- data.frame(gnv, google.location)
g.inter.map <- gvisMap(data = gnv.google, locationvar = "google.location",
tipvar = "Narrative")
plot(g.inter.map)
nRows <- 100
library(googleVis)
nRows <- 100
google.location <- paste(gnv$lat[1:nRows], gnv$lon[1:nRows], sep = ":")
gnv.google <- data.frame(gnv[1:nRows,], google.location)
g.inter.map <- gvisMap(data = gnv.google, locationvar = "google.location",
tipvar = "Narrative")
plot(g.inter.map)
library(googleVis)
n_rows <- 100
goo_loc <- paste(gnv$lat[1:n_rows], gnv$lon[1:n_rows], sep = ":")
goo_gnv <- data.frame(gnv[1:n_rows,], goo_loc)
g.inter.map <- gvisMap(data = goo_gnv, locationvar = "goo_loc",
tipvar = "Narrative")
plot(g.inter.map)
library(googleVis)
n_rows <- 100
goo_loc <- paste(gnv$lat[1:n_rows], gnv$lon[1:n_rows], sep = ":")
goo_gnv <- data.frame(gnv[1:n_rows,], goo_loc)
g.inter.map <- gvisMap(data = goo_gnv, locationvar = "goo_loc",
tipvar = c("Narrative", "Offense.Date"))
plot(g.inter.map)
g.inter.map <- gvisMap(data = goo_gnv, locationvar = "goo_loc",
tipvar = "Narrative")
gvisMap(data = goo_gnv, locationvar = "goo_loc",
tipvar = "Narrative")
n_rows <- 100
goo_loc <- paste(gnv$lat[1:n_rows], gnv$lon[1:n_rows], sep = ":")
goo_gnv <- data.frame(gnv[1:n_rows,], goo_loc)
g.inter.map <- gvisMap(data = goo_gnv, locationvar = "goo_loc",
options=list(showTip=TRUE, showLine=TRUE, enableScrollWheel=TRUE,
mapType='hybrid', useMapTypeControl=TRUE,
width=800,height=400),
gvis.editor = "Edit this",
tipvar = "Narrative")
plot(g.inter.map)
library(googleVis)
n_rows <- 500
goo_loc <- paste(gnv$lat[1:n_rows], gnv$lon[1:n_rows], sep = ":")
goo_gnv <- data.frame(gnv[1:n_rows,], goo_loc)
g.inter.map <- gvisMap(data = goo_gnv,
locationvar = "goo_loc",
options=list(showTip=TRUE,
showLine=TRUE,
enableScrollWheel=TRUE,
mapType='hybrid',
useMapTypeControl=TRUE,
width=800,
height=400),
tipvar = "Narrative")
plot(g.inter.map)
summary(zip)
options("viewer")
zip_df <- data.frame(zip)
zip$pop <- zip$POP1996
zip$pop <- zip$POP1996
# create a df version of zip
zip_df <- data.frame(zip)
zip$pop <- zip$POP1996
# create a df version of zip
zip_df <- data.frame(zip)
x <- gSimply(zip, tol = 0.01, topologyPreserve = TRUE)
x <- gSimplify(zip, tol = 0.01, topologyPreserve = TRUE)
library(rgeos)
install.packages("rgeos")
library(rgeos)
x <- gSimplify(zip, tol = 0.01, topologyPreserve = TRUE)
plot(x)
writeOGR(x, leafdat, layer="", driver="GeoJSON")
writeOGR(zip, leafdat, layer="", driver="GeoJSON")
writeOGR(zip, layer="", driver="GeoJSON")
getwd()
writeOGR(zip, "zip_json.geojson", layer="", driver="GeoJSON")
writeOGR(zip, ".", layer="", driver="GeoJSON")
writeOGR(zip, "zip_json", layer="", driver="GeoJSON")
writeOGR(zip, "zip_json.geojson", layer="", driver="GeoJSON")
filename<-list.files(downloaddir, pattern=".shp", full.names=FALSE)
writeOGR(zip, "zip_json", layer="zip_json", driver="GeoJSON")
writeOGR(zip, "zip_json", layer="", driver="GeoJSON")
writeOGR(zip, "zips_alachua", layer="", driver="GeoJSON")
writeOGR(zip, "zips_alachua", layer="zips_alachua.geojson", driver="GeoJSON")
# ----- Gradulated style based on an attribute
sty<-styleGrad(prop="Population", breaks=cuts, right=FALSE, style.par="col",
style.val=rev(heat.colors(6)), leg="Population (2010)", lwd=1)
library(leafletR)
install.packages("leafletR")
downloaddir<-getwd()
getwd()
downloaddir<-paste0(getwd(), "zips_alachua"
filename<-list.files(downloaddir, pattern=".shp", full.names=FALSE)
downloaddir
downloaddir<-paste0(getwd(), "zips_alachua" )
filename<-list.files(downloaddir, pattern=".shp", full.names=FALSE)
filename
downloaddir
downloaddir<-paste0(getwd(), "zips_alachua/" )
downloaddir<-paste0(getwd(), "/zips_alachua/" )
filename<-list.files(downloaddir, pattern=".shp", full.names=FALSE)
filename
filename<-gsub(".shp", "", filename)
dat <- zip
subdat<- dat
subdat<-spTransform(subdat, CRS("+init=epsg:4326"))
names(subdat)
names(subdat)[names(subdat) == "POP1996"]<-"Population"
subdat<-gSimplify(subdat,tol=0.01, topologyPreserve=TRUE)
# ----- to write to geojson we need a SpatialPolygonsDataFrame
subdat<-SpatialPolygonsDataFrame(subdat, data=subdat_data)
subdat_data<-subdat@data
subdat
subdat@data
subdat
summary(subdat)
dat <- zip
# ----- Create a subset of New York counties
subdat<- dat
# ----- Transform to EPSG 4326 - WGS84 (required)
subdat<-spTransform(subdat, CRS("+init=epsg:4326"))
summary(subdat)
subdat<-spTransform(subdat, CRS("+init=epsg:4326"))
# ----- change name of field we will map
names(subdat)[names(subdat) == "POP1996"]<-"Population"
# # ----- save the data slot
subdat_data<- subdat@data
# ----- simplification yields a SpatialPolygons class
subdat<-gSimplify(subdat,tol=0.01, topologyPreserve=TRUE)
plot(subdat)
subdat<-SpatialPolygonsDataFrame(subdat, data=subdat_data)
# ----- Write data to GeoJSON
leafdat<-paste(downloaddir, "/", filename, ".geojson", sep="")
leafdat
writeOGR(subdat, leafdat, layer="", driver="GeoJSON")
# note that this file is somewhat big so it might take a couple
# of minutes to download
#url<-"http://www2.census.gov/geo/tiger/TIGER2010DP1/County_2010Census_DP1.zip"
downloaddir<-paste0(getwd(), "/zips_alachua" )
filename<-list.files(downloaddir, pattern=".shp", full.names=FALSE)
filename<-gsub(".shp", "", filename)
# ----- Change zip to dat
dat <- zip
# ----- Create a subset of New York counties
subdat<- dat
# ----- Transform to EPSG 4326 - WGS84 (required)
subdat<-spTransform(subdat, CRS("+init=epsg:4326"))
# ----- change name of field we will map
names(subdat)[names(subdat) == "POP1996"]<-"Population"
# # ----- save the data slot
subdat_data<- subdat@data
# ----- simplification yields a SpatialPolygons class
subdat<-gSimplify(subdat,tol=0.01, topologyPreserve=TRUE)
# ----- to write to geojson we need a SpatialPolygonsDataFrame
subdat<-SpatialPolygonsDataFrame(subdat, data=subdat_data)
# ----- Write data to GeoJSON
leafdat<-paste(downloaddir, "/", filename, ".geojson", sep="")
writeOGR(subdat, leafdat, layer="", driver="GeoJSON")
cuts<-round(quantile(subdat$Population, probs = seq(0, 1, 0.20), na.rm = FALSE), 0)
cuts[1]<-0 # ----- for this example make first cut zero
# ----- Fields to include in the popup
popup<-c("ZIP", "Population")
# ----- Gradulated style based on an attribute
sty<-styleGrad(prop="Population", breaks=cuts, right=FALSE, style.par="col",
style.val=rev(heat.colors(6)), leg="Population (2010)", lwd=1)
library(leaftletR)
library(leafletR)
writeOGR(subdat, leafdat, layer="", driver="GeoJSON")
sty<-styleGrad(prop="Population", breaks=cuts, right=FALSE, style.par="col",
style.val=rev(heat.colors(6)), leg="Population (2010)", lwd=1)
# ----- Create the map and load into browser
map<-leaflet(data=leafdat, dest=downloaddir, style=sty,
title="index", base.map="osm",
incl.data=TRUE,  popup=popup)
togeojson <- function(file, writepath = "~") {
url <- "http://ogre.adc4gis.com/convert"
tt <- POST(url, body = list(upload = upload_file(file)))
out <- content(tt, as = "text")
fileConn <- file(writepath)
writeLines(out, fileConn)
close(fileConn)
}
leafdat
downloaddir
togeojson(zip, leafdat)
getwd()
file <- paste0(getwd(), "zips_alachua", "ACDPS_zipcode.shp")
file
file <- paste0(getwd(), "zips_alachua/", "ACDPS_zipcode.shp")
file
file <- paste0(getwd(), "/zips_alachua/", "ACDPS_zipcode.shp")
file
togeojson(file, leafdat)
library(httr)
file <- paste0(getwd(), "/zips_alachua/", "ACDPS_zipcode.shp")
togeojson(file, leafdat)
cuts<-round(quantile(subdat$Population, probs = seq(0, 1, 0.20), na.rm = FALSE), 0)
cuts[1]<-0 # ----- for this example make first cut zero
# ----- Fields to include in the popup
popup<-c("ZIP", "Population")
# ----- Gradulated style based on an attribute
sty<-styleGrad(prop="Population", breaks=cuts, right=FALSE, style.par="col",
style.val=rev(heat.colors(6)), leg="Population (2010)", lwd=1)
# ----- Create the map and load into browser
map<-leaflet(data=leafdat, dest=downloaddir, style=sty,
title="index", base.map="osm",
incl.data=TRUE,  popup=popup)
leafdat
downloaddir
map<-leaflet(data=leafdat, dest=downloaddir, style=sty,
title="index", base.map="osm",
incl.data=TRUE,  popup=popup)
file
file <- paste0(getwd(), "/zips_alachua/", "ACDPS_zipcode")
togeojson(file, leafdat)
file <- paste0(getwd(), "/zips_alachua/", "ACDPS_zipcode.zip")
togeojson(file, leafdat)
file <- paste0(getwd(), "/zips_alachua/", "ACDPS_zipcode")
togeojson(file, leafdat)
leafdat
file
file <- paste0(getwd(), "/zips_alachua/", "ACDPS_zipcode/ACDPS_zipcode.shp")
togeojson(file, leafdat)
file <- paste0(getwd(), "/zips_alachua/", "ACDPS_zipcode.zip")
togeojson(file, leafdat)
map<-leaflet(data=leafdat, dest=downloaddir, style=sty,
title="index", base.map="osm",
incl.data=TRUE,  popup=popup)
# ----- to look at the map you can use this code
browseURL(map)

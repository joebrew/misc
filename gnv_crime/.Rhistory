library(RODBC) # Read in the
install.packages("RODBC")
bm <- odbcConnect("vw_BirthMaster", uid="BrewJR", pwd="stopFlu2013")
library(RODBC) # Read in the
bm <- odbcConnect("vw_BirthMaster", uid="BrewJR", pwd="stopFlu2013")
bm <- odbcConnect("HMS01 Shadow", uid="BrewJR", pwd="Colometa08")
bm <- odbcConnect("HMS01 Shadow")
x <- c("25 (%)", "35(%)")
gsub(["(%)"], "", x)
gsub("[(%)]", "", x)
ls()
dir()
stem(1:10)
stem(seq(1,10,by=0.05))
library(gdata)
install.packages("weatherData")
library(weatherData)
# Get weather for just one day
getWeatherForDate("GNV", "2014-04-14")
# Get weather for a period of time
start <- as.Date("2014-01-01", format = "%Y-%m-%d") # define jan 1 2014 as start
x <- getSummarizedWeather("GNV", start_date = start,
end_date = Sys.Date() - 1,
opt_custom_columns = TRUE,
custom_columns = c(2,4,20))
# Glimpse at your data
head(x)
# Plot rainfall
plot(x$Date, as.numeric(x$PrecipitationIn),
cex = as.numeric(x$PrecipitationIn),
col = adjustcolor("red", alpha.f=0.4),
pch = 16)
lines(x$Date, as.numeric(x$PrecipitationIn),
col = adjustcolor("black", alpha.f = 0.4))
# Plot max temperature
plot(x$Date, x$Max_TemperatureF,
col = adjustcolor("darkred", alpha.f = 0.3),
pch = 16)
# Add min temperature
points(x$Date, x$Min_TemperatureF,
col = adjustcolor("darkblue", alpha.f = 0.3),
pch = 16,
add = T)
#########
# SET LOCAL WORKING DIRECTORY
#########
setwd("C:/Users/BrewJR/Documents/misc") # change this line to whereever you cloned misc
setwd("gnv_crime")
#########
# READ IN GAINESVILLE CRIME DATA
#########
# define the link for gainesville crime
my_link1 <- "https://data.cityofgainesville.org/api/views/9ccb-cyth/rows.csv"
# read in the data
gnv <- read.csv(my_link1)
#########
# CLEAN IT UP A BIT
#########
# write a function to clean lat lon points
JoeFun <- function(x){
# split the string to keep only the lat, lon, part
a <- do.call(rbind, strsplit(as.character(x), "\n"))
aa <- a[,3]
# now split at the comma
b <- do.call(rbind, strsplit(as.character(aa), ","))
bb <- b#[,2]
# make df
bb <- data.frame(bb)
# fix names
names(bb) <- c("lat", "lon")
# remove parentheses
bb$lat <- as.numeric(gsub("\\(|\\)", "", bb$lat))
bb$lon <- as.numeric(gsub("\\(|\\)", "", bb$lon))
return(bb)
}
x <- JoeFun(gnv$Location.1)
# now join x to gnv
gnv <- cbind(gnv, x)
rm(x)
# Make a date column
gnv$date <- as.Date(substr(gnv$Offense.Date,1,10), format = "%m/%d/%Y")
# view it
hist(gnv$date, breaks = 100)
# Remove dates prior to 2011
gnv <- gnv[which(gnv$date > "2011-01-01"),]
hist(gnv$date, breaks = 100)
#########
# MAKE SOME MAPS
#########
# plot the points on a florida map
library(maps)
map("county", "florida")
points(gnv$lon, gnv$lat, col = "red")
# Plot the points on an Alachua map
library(rgdal)
library(sp)
zip <- readOGR("zips_alachua", "ACDPS_zipcode")
zip <- spTransform(zip, CRS("+init=epsg:4326"))
zip$zip <- as.numeric(as.character(zip$ZIP))
plot(zip, col = "grey", border = "white")
points(gnv$lon, gnv$lat,
col = adjustcolor(rainbow(nrow(gnv)), alpha.f = 0.3),
pch = 16,
cex = 0.3)
# Color by crime type ("Narrative")
library(RColorBrewer)
my_colors <- colorRampPalette(rainbow(10))(length(levels(gnv$Narrative)))
gnv$col <- my_colors[as.numeric(gnv$Narrative)]
plot(zip, col = "grey", border = "white")
points(gnv$lon, gnv$lat,
col = adjustcolor(gnv$col, alpha.f = 0.5),
pch = 16,
cex = 0.5)
legend(x = "bottomleft",
pch = 16,
col = adjustcolor(my_colors, alpha.f = 0.8),
pt.cex = 0.1,
cex = 0.1,
ncol = 6,
bty = "n",
legend = substr(levels(gnv$Narrative), 1, 5))
########
# GET ZIP CODE FOR EACH CRIME
########
# make a spatial version of gnv
gnv <- gnv[which(!is.na(gnv$lat) & !is.na(gnv$lon)),]
gnv_sp <- SpatialPointsDataFrame(gnv[,c("lon", "lat")], gnv,
proj4string = CRS("+init=epsg:4326"))
x <- over(gnv_sp, polygons(zip))
# Return to dataframe
gnv$zip <- zip$zip[x]
#########
# GET NUMBER OF CRIMES BY ZIP CODE
#########
library(dplyr)
crimes_zip <-
gnv %>%
group_by(zip) %>%
summarise(n_crimes = n()) %>%
arrange(desc(n_crimes))
# bring those numbers into the spatial polygons data frame
zip_df <- data.frame(zip)
zip_df <- merge(x = zip_df,
y = crimes_zip,
by = "zip",
all.x = TRUE,
all.y = FALSE)
zip$n_crimes <- zip_df$n_crimes
##########
# WRITE A FUNCTION FOR MAKING A CHOROPLETH MAP OF THESE ZIP CODES
##########
library(classInt)
MapFun <- function(var, color){
plotvar <- var
nclr <- 8
plotclr <- brewer.pal(nclr, color)
class <- classIntervals(plotvar, nclr, style = "quantile", dataPrecision=0) #use "quantile" instead
#class <- classIntervals(0:100, nclr, style="equal")
colcode <- findColours(class, plotclr)
legcode <- paste0(gsub(",", " - ", gsub("[[]|[]]|[)]", "", names(attr(colcode, "table")))))
plot(zip, border="darkgrey", col=colcode)
legend("bottomleft", # position
legend = legcode, #names(attr(colcode, "table")),
fill = attr(colcode, "palette"),
cex = 0.8,
border=NA,
bty = "n",
y.intersp = 0.6)
}
# Now plot
MapFun(zip$n_crimes, "Blues")
title(main = "Number of crimes by zip code")
# Plot rate (adj. for pop)
MapFun(zip$n_crimes / zip$POP1996 * 100000, "Blues")
title(main = "Crime rate by zip code")
# PLOT WITH GOOGLE
library(googleVis)
n_rows <- 100
goo_loc <- paste(gnv$lat[1:n_rows], gnv$lon[1:n_rows], sep = ":")
goo_gnv <- data.frame(gnv[1:n_rows,], goo_loc)
g.inter.map <- gvisMap(data = goo_gnv,
locationvar = "goo_loc",
options=list(showTip=TRUE,
showLine=TRUE,
enableScrollWheel=TRUE,
mapType='hybrid',
useMapTypeControl=TRUE,
width=800,
height=400),
tipvar = "Narrative")
plot(g.inter.map)
# PLOT WITH LEAFLET / rCHARTS
#library(devtools)
#install_github("rCharts", "ramnathv")
library(rCharts)
# read in geojson version of zip
#zip_geoj <- readOGR("zips_alachua", "ACDPS_zipcode")
mymap <- Leaflet$new()
mymap$tileLayer(provider = "Stamen.TonerLite")
mymap$setView(c(29.55, -82.12), zoom = 10)
mymap$enablePopover(TRUE)
mymap$geoJson(zipgj)
mymap$fullScreen(TRUE)
for (i in 1:100){
mymap$marker(c(gnv$lat[i], gnv$lon[i]),
bindPopup = paste(gnv$Narrative[i],
gnv$Offense.Date[i]))
}
mymap
# http://zevross.com/blog/2014/04/11/using-r-to-quickly-create-an-interactive-online-map-using-the-leafletr-package/
# Clean up zip code stuff to add to it
# give better variable name
zip$pop <- zip$POP1996
# create a df version of zip
zip_df <- data.frame(zip)
# simplify to spatial polygons class
library(leafletR)
library(rgdal) #for reading/writing geo files
library(rgeos) #for simplification
library(sp)
downloaddir<-paste0(getwd(), "/zips_alachua" )
filename<-list.files(downloaddir, pattern=".shp", full.names=FALSE)
filename<-gsub(".shp", "", filename)
# ----- Change zip to dat
dat <- zip
subdat<- dat
# ----- Transform to EPSG 4326 - WGS84 (required)
subdat<-spTransform(subdat, CRS("+init=epsg:4326"))
# ----- change name of field we will map
names(subdat)[names(subdat) == "POP1996"]<-"Population"
# # ----- save the data slot
subdat_data<- subdat@data
# ----- simplification yields a SpatialPolygons class
# subdat<-gSimplify(subdat,tol=0.01, topologyPreserve=TRUE)
# ----- to write to geojson we need a SpatialPolygonsDataFrame
subdat<-SpatialPolygonsDataFrame(subdat, data=subdat_data)
# ----- Write data to GeoJSON
leafdat<-paste(downloaddir, "/", filename, ".geojson", sep="")
#zipgj <- toGeoJSON(data = zip, dest = paste0(getwd(),"/zips_alachua"))
zipgj <- toGeoJSON(data = subdat, dest = paste0(getwd(),"/zips_alachua"))
# # ------ Function to write to GeoJSON
# togeojson <- function(file, writepath = "~") {
#   url <- "http://ogre.adc4gis.com/convert"
#   tt <- POST(url, body = list(upload = upload_file(file)))
#   out <- content(tt, as = "text")
#   fileConn <- file(writepath)
#   writeLines(out, fileConn)
#   close(fileConn)
# }
#
# library(httr)
# file <- paste0(getwd(), "/zips_alachua/", "ACDPS_zipcode.zip")
# togeojson(file, leafdat)
# ----- Create the cuts
cuts<-round(quantile(subdat$Population, probs = seq(0, 1, 0.20), na.rm = FALSE), 0)
cuts[1]<-0 # ----- for this example make first cut zero
# ----- Fields to include in the popup
popup<-c("ZIP", "Population")
# ----- Gradulated style based on an attribute
sty<-styleGrad(prop="Population", breaks=cuts, right=FALSE, style.par="col",
style.val=rev(heat.colors(6)), leg="Population", lwd=1)
# ----- Create the map and load into browser
map<-leaflet(data=zipgj, dest=downloaddir, style=sty,
title="index", base.map="osm",
incl.data=TRUE,  popup=popup)
# ----- to look at the map you can use this code
browseURL(map)
####################
install.packages("rgbif")
library(rgbif)
file2 <-  "/zips_alachua/ACDPS_zipcode.shp"
## Success! File is at /Users/scottmac2/abiesmagmap.geojson
gist(paste0(getwd(),"/zips_alachua/zip.geojson"), description = "test")
# MODELING
##################################
# Let's just look at 2013
gnv <- gnv[which(gnv$date >= "2013-01-01" &
gnv$date <= "2013-12-31"),]
#install.packages("weatherData")
library(weatherData)
# Get weather for just one day
getWeatherForDate("GNV", "2014-04-14")
# Get weather for a period of time
weather <- getSummarizedWeather("GNV", start_date = min(gnv$date),
end_date = max(gnv$date),
opt_custom_columns = TRUE,
custom_columns = c(2,4,20))
# format
weather$date <- as.Date(weather$Date, format = "%Y-%m-%d")
# Merge to gnv
gnv <- merge(x = gnv,
y = weather,
by = "date",
all.x = TRUE,
all.y = FALSE)
# Glimpse at your data
head(x)
# Plot max temperature
plot(x$Date, x$Max_TemperatureF,
col = adjustcolor("darkred", alpha.f = 0.3),
pch = 16)
# Add min temperature
points(x$Date, x$Min_TemperatureF,
col = adjustcolor("darkblue", alpha.f = 0.3),
pch = 16)
#
abline(v = Sys.Date() - 365)
head(weather)
# Plot max temperature
plot(weather$Date, weather$Max_TemperatureF,
col = adjustcolor("darkred", alpha.f = 0.3),
pch = 16)
# Add min temperature
points(weather$Date, weather$Min_TemperatureF,
col = adjustcolor("darkblue", alpha.f = 0.3),
pch = 16)
plot(weather$Date, weather$Max_TemperatureF,
col = adjustcolor("darkred", alpha.f = 0.3),
pch = 16,
ylim = c(0, 100))
# Add min temperature
points(weather$Date, weather$Min_TemperatureF,
col = adjustcolor("darkblue", alpha.f = 0.3),
pch = 16)
legend("bottom",
pch = 16,
col = adjustcolor(c("darkred", "darkblue"), alpha.f = 0.3),
legend = c("High", "Low"),
bty = "n")
abline(v = Sys.Date() - 365)
# Plot max temperature
plot(weather$Date, weather$Max_TemperatureF,
col = adjustcolor("darkred", alpha.f = 0.3),
pch = 16,
ylim = c(20, 100),
xlab = "Date",
ylab = "Temp")
# Add min temperature
points(weather$Date, weather$Min_TemperatureF,
col = adjustcolor("darkblue", alpha.f = 0.3),
pch = 16)
# Add legend
legend("bottom",
pch = 16,
col = adjustcolor(c("darkred", "darkblue"), alpha.f = 0.3),
legend = c("High", "Low"),
bty = "n")
#
abline(v = Sys.Date() - 365)
Sys.Date() - 365
# Plot max temperature
plot(weather$Date, weather$Max_TemperatureF,
col = adjustcolor("darkred", alpha.f = 0.3),
pch = 16,
ylim = c(20, 100),
xlab = "Date",
ylab = "Temp")
# Add min temperature
points(weather$date, weather$Min_TemperatureF,
col = adjustcolor("darkblue", alpha.f = 0.3),
pch = 16)
# Add legend
legend("bottom",
pch = 16,
col = adjustcolor(c("darkred", "darkblue"), alpha.f = 0.3),
legend = c("High", "Low"),
bty = "n")
#
abline(v = Sys.Date() - 365)
plot(weather$date, weather$Max_TemperatureF,
col = adjustcolor("darkred", alpha.f = 0.3),
pch = 16,
ylim = c(20, 100),
xlab = "Date",
ylab = "Temp")
# Add min temperature
points(weather$date, weather$Min_TemperatureF,
col = adjustcolor("darkblue", alpha.f = 0.3),
pch = 16)
# Add legend
legend("bottom",
pch = 16,
col = adjustcolor(c("darkred", "darkblue"), alpha.f = 0.3),
legend = c("High", "Low"),
bty = "n")
#
abline(v = Sys.Date() - 365)
abline(v = Sys.Date() - 365,
col = adjustcolor("black", alpha.f = 0.4),
lwd = 2)
head(gnv)
gnv %>%
group_by(date) %>%
summarise(crimes = n())
names(gnv)
gnv %>%
group_by(date) #%>%
gnv$Date <- NULL
gnv %>%
group_by(date) #%>%
gnv %>%
group_by(date) #%>%
gnv %>%
group_by(date) %>%
summarise(crimes = n())
gnv %>%
group_by(date, zip) %>%
summarise(crimes = n())
names(gnv)
table(gnv$Narrative)
gnv %>%
group_by(Narrative) %>%
summarise(crimes = n()) %>%
arrange(desc(crimes))
head(gnv)
gnv %>%
group_by(Original.Crime) %>%
summarise(crimes = n()) %>%
arrange(desc(crimes))
x <- gnv %>%
group_by(date) %>%
summarise(accidents = n(Narrative == "TRAFFIC ACCIDENT")) %>%
arrange(desc(accidents))
x <- gnv %>%
filter(Narrative == "TRAFFIC ACCIDENT") %>%
group_by(date) %>%
summarise(accidents = n(row)) %>%
arrange(desc(accidents))
x <- gnv %>%
filter(Narrative == "TRAFFIC ACCIDENT") %>%
group_by(date) %>%
summarise(accidents = n()) %>%
arrange(desc(accidents))
x
head(weather)
head(gnv)
x <- gnv %>%
filter(Narrative == "TRAFFIC ACCIDENT") %>%
group_by(date, zip) %>%
summarise(accidents = n()) %>%
arrange(desc(accidents))
head(x)
fit <- gam(accidents ~ factor(zip) + s(date),
data = x)
library(gam)
install.packages("mgcv")
library(mgcv)
fit <- gam(accidents ~ factor(zip) + s(date),
data = x)
library(geosphere)
install.packages("geosphere")
library(geosphere)
gnv %>%
group_by(date, zip) %>%
summarise(crimes = n()) %>%
arrange(desc(crimes))
x <- merge (x = x,
y = weather,
by = "date",
all.x = TRUE,
all.y = FALSE)
head(x)
lm(x$accidents ~ x$PrecipitationIn)
head(weather)
str(weather)
weather$rain <- as.numeric(weather$PrecipitationIn)
weather$rain
lm(x$accidents ~ x$rain)
x <- merge (x = x,
y = weather,
by = "date",
all.x = TRUE,
all.y = FALSE)
lm(x$accidents ~ x$rain)
lm(x$accidents ~ x$rain + factor(x$zip))
conf(fit)
confint(fit)
fit <- lm(x$accidents ~ x$rain + factor(x$zip))
confint(fit)
summary(fit)
fit <- gam((x$accidents ~ x$rain + factor(x$zip))
fit <- gam(x$accidents ~ x$rain + factor(x$zip))
head(x)
fit <- gam(x$accidents ~ x$rain + factor(x$zip))
x$zipfac <- factor(x$zip)
fit <- lm(accidents ~ rain + zipfact,
data = x)
fit <- lm(accidents ~ rain + zipfac,
data = x)
summary(fit)
confint(fit)
levels(zipfac)
levels(x$zipfac)
levels(x$zipfac) <- rev(levels$zipfac)
fit <- lm(accidents ~ rain + zipfac,
data = x)
summary(fit)
confint(fit)
library(mgcv)
fit <- gam(accidents ~ x$rain + factor(x$zip))
fit <- gam(accidents ~ x$rain + factor(x$zip),
data = x)
plot(fit)
summary(fit)
fit <- gam(accidents ~ s(x$rain) + factor(x$zip),
data = x)
summary(fit)
plot(fit)
gnv %>%
group_by(Narrative) %>%
summarise(crimes = n()) %>%
arrange(desc(crimes))
